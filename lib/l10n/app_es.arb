{
  "close": "Cerrar",
  "correctTitle": "¡Correcto! 🎉",
  "correctContent": "¡Genial! Has declarado una variable en Swift correctamente.\n\nExplicación:\n1. Usaste la palabra clave `var` para crear una variable.\n2. El nombre de la variable puede ser cualquier identificador válido, como `greeting`, `message` o `g`.\n3. El valor asignado a la variable debe ser una cadena válida entre comillas dobles (`\"`).",
  "hint1Title": "Pista 1",
  "hint1Content": "Usa la palabra clave `var` para declarar variables. Por ejemplo:\n`var nombreVariable = \"valor\"`.",
  "hint2Title": "Pista 2",
  "hint2Content": "Asegúrate de usar comillas rectas (`\"`) y no comillas curvas (`“` o `”`).",
  "solutionTitle": "Solución",
  "solutionContent": "La sintaxis correcta es:\n\n`var nombreVariable = \"valor\"`\n\nEjemplo:\n`var greeting = \"Hello, World!\"`\n`var g = \"Swift\"`",
  "tryAgain": "¡Intenta de nuevo! ({failedAttempts}/3 intentos)",
  "exerciseInstructionsTitle": "Instrucciones del ejercicio",
  "exerciseInstructionsContent": "¡Bienvenido a tu primer ejercicio en Swift! 🎉\nTu tarea: Declara una variable llamada `greeting` y asígnale el valor \"Hello, World!\".\n\nEjemplo:\nvar greeting = \"Hello, World!\"\n\nConsejo: Usa la palabra clave `var` para declarar una variable.",
  "enterYourCodeHere": "Ingresa tu código aquí",
  "varKeyword": "var",
  "exercise2InstructionsContent": "¡Bienvenido al segundo ejercicio en Swift! 🎉\n\nTu tarea:\n1. Declara una variable llamada `number` y asígnale el valor 5.\n2. Actualiza el valor de `number` sumándole un número.\n\nEjemplo:\nvar number = 5\nnumber = number + 10",
  "exercise2CorrectContent": "¡Genial! Has declarado y actualizado correctamente una variable en Swift.\n\nExplicación:\n1. Declaraste una variable llamada `number` y le asignaste el valor inicial de 5.\n2. Luego, actualizaste su valor sumándole un número.\n\nEsto demuestra cómo las variables pueden declararse y modificarse en Swift.",
  "exercise2Hint1Content": "Usa la palabra clave `var` para declarar una variable. Asigna un valor inicial como `var number = 5`.",
  "exercise2Hint2Content": "Después de declarar la variable, actualiza su valor sumándole un número, por ejemplo: `number = number + 10`.",
  "exercise2SolutionContent": "La solución correcta es:\n\nvar number = 5;\nnumber = number + 10;",
  "exercise3InstructionsContent": "¡Bienvenido a tu tercer ejercicio en Swift! 🎉\n\nTu tarea:\n1. Usa la función `print()` para mostrar un mensaje en la consola.\n2. Prueba con cualquier mensaje que desees dentro de los paréntesis.\n\nPista: Asegúrate de que tu texto esté entre comillas dobles y siga el formato `print(\"Tu mensaje\")`.",
  "exercise3CorrectContent": "¡Bien hecho! Has usado correctamente la función `print()`.\n\nExplicación:\nLa función `print()` te permite mostrar cualquier mensaje en la consola. Por ejemplo:\n- print(\"¡Swift es divertido!\")\n- print(\"¡Hola, mundo!\")\nSiéntete libre de experimentar con diferentes mensajes.",
  "exercise3SolutionContent": "La respuesta correcta es cualquier uso válido de la función `print()`. Por ejemplo:\n\nprint(\"¡Swift es divertido!\")\nprint(\"¡Aprender es genial!\")",
  "exercise4InstructionsContent": "¡Bienvenido a este ejercicio en Swift! 🎉\n\nTu tarea: Declara variables y realiza una operación aritmética.\nEjemplo:\nvar a = 5\nvar b = a\nvar sum = a + b\nprint(sum)",
  "exercise4CorrectContent": "¡Genial! Has declarado variables y realizado operaciones aritméticas en Swift correctamente.\n\nExplicación:\n1. Usaste la palabra clave `var` para declarar variables.\n2. Asignaste valores a las variables, incluyendo una que depende de otra.\n3. Realizaste una operación aritmética (`a + b`) y almacenaste el resultado en una nueva variable `sum`.\n4. Finalmente, usaste `print(sum)` para mostrar el resultado en la consola.\n\nEntender cómo declarar variables y usar operaciones aritméticas es un paso fundamental en programación.",
  "exercise4Hint1Content": "Recuerda usar la palabra clave `var` para declarar variables y asignarles valores.",
  "exercise4Hint2Content": "Piensa en asignar un valor a una variable usando otra, como `var b = a`.",
  "exercise4Hint3Content": "Estructura tu código de esta manera:\n1. Declara dos variables.\n2. Súmalas.\n3. Muestra el resultado.",
  "hint3Title": "Pista 3",
  "exercise5InstructionsContent": "¡Bienvenido a este ejercicio en Swift! 🎉\n\nTu tarea: Declara una variable y usa la interpolación de cadenas.\nEjemplo:\nvar name = \"Juan\"\nprint(\"Hola, mi nombre es \\(name)!\")",
  "exercise5CorrectContent": "¡Bien hecho! Has usado correctamente la interpolación de cadenas en Swift.\n\nExplicación:\n1. Declaraste una variable `name` y le asignaste un valor.\n2. Usaste la función `print()` para mostrar un mensaje.\n3. Dentro de `print()`, incluiste la variable `name` en el texto utilizando la interpolación de cadenas (`\\(name)`).\n\nLa interpolación de cadenas te permite combinar variables y texto dinámicamente, haciendo que tu código sea más poderoso y expresivo.",
  "exercise5Hint1Content": "Recuerda usar la palabra clave `var` para declarar una variable y asignarle un valor (por ejemplo, var name = \"Juan\").",
  "exercise5Hint2Content": "Usa la interpolación de cadenas para combinar una variable y texto dentro de `print()`. Por ejemplo: print(\"Hola, mi nombre es \\(name)!\").",
  "exercise5Hint3Content": "Estructura tu código así:\n1. Declara una variable `name` y asígnale un valor.\n2. Usa la interpolación de cadenas para incluir `name` en un mensaje usando `print()`.",
  "exercise6InstructionsContent": "¡Bienvenido a este ejercicio en Swift! 🎉\n\nTu tarea: Calcula el área de un rectángulo.\n1. Declara las variables `length` y `width`.\n2. Multiplícalas para calcular el área.\n3. Usa `print()` para mostrar el resultado.\n\nEjemplo:\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
  "exercise6CorrectContent": "¡Buen trabajo! Has calculado correctamente el área de un rectángulo.\n\nExplicación:\n1. `var length` y `var width` se usan para declarar las dimensiones del rectángulo.\n2. Al multiplicarlas obtienes el `area`.\n3. `print(area)` muestra el resultado.",
  "exercise6Hint1Content": "Recuerda usar la palabra clave `var` para declarar variables.",
  "exercise6Hint2Content": "Usa `length * width` para calcular el área.",
  "exercise6Hint3Content": "Aquí está la estructura correcta:\n1. Declara dos variables para `length` y `width`.\n2. Multiplícalas para calcular el `area`.\n3. Imprime el resultado.",
  "exercise6SolutionContent": "La respuesta correcta es:\n\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
  "exercise7InstructionsContent": "Tu tarea: Combina dos cadenas usando concatenación.\n\nEjemplo:\nvar firstName = \"Juan\"\nvar lastName = \"Pérez\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
  "exercise7CorrectContent": "¡Bien hecho! Has concatenado correctamente cadenas en Swift.\n\nExplicación:\n1. Declaraste dos variables de tipo `String`.\n2. Usaste el operador `+` para concatenarlas.\n3. Finalmente, usaste `print()` para mostrar la cadena combinada.",
  "exercise7Hint1Content": "Usa el operador `+` para concatenar cadenas.",
  "exercise7Hint2Content": "Combina las cadenas e incluye un espacio entre ellas.",
  "exercise7SolutionContent": "La respuesta correcta es:\n\nvar firstName = \"Juan\"\nvar lastName = \"Pérez\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
  "exercise8InstructionsContent": "Tu tarea: Declara variables de diferentes tipos (`Int`, `Double`, `String`, `Bool`) e imprímelas.\n\nEjemplo:\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)",
  "exercise8CorrectContent": "¡Genial! Has declarado variables de diferentes tipos en Swift.\n\nExplicación:\n1. `Int` se usa para números enteros.\n2. `Double` se usa para números decimales.\n3. `String` se usa para texto.\n4. `Bool` se usa para valores true/false.\n5. `print()` muestra los valores de las variables.",
  "exercise8Hint1Content": "Asegúrate de especificar el tipo de cada variable. Por ejemplo: `var age: Int = 25`.",
  "exercise8Hint2Content": "Recuerda imprimir todas las variables usando `print(variableName)`.",
  "exercise8SolutionContent": "La respuesta correcta es:\n\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)",
  "exercise9InstructionsContent": "Tu tarea: Declara constantes usando `let` e imprime sus valores.\n\nEjemplo:\nlet pi = 3.14159\nlet appName = \"Swift Learning\"\nprint(pi)\nprint(appName)",
  "exercise9CorrectContent": "¡Bien hecho! Has declarado constantes en Swift y las usaste en tu código.\n\nExplicación:\n1. `let` se usa para declarar constantes.\n2. Las constantes no se pueden cambiar una vez asignadas.\n3. Imprimiste las constantes correctamente para verificar sus valores.",
  "exercise9Hint1Content": "Recuerda usar la palabra clave `let` para declarar constantes.",
  "exercise9Hint2Content": "Asegúrate de imprimir las constantes correctamente, como `print(constantName)`.",
  "exercise9SolutionContent": "La respuesta correcta es:\n\nlet pi = 3.14159\nlet appName = \"Swift Learning\"\nprint(pi)\nprint(appName)",
  "exercise10InstructionsContent": "Tu tarea: Crea un array con tres enteros e imprime elementos específicos.\n\nEjemplo:\nvar fruits = [\"Manzana\", \"Banana\", \"Cereza\"]\nprint(fruits[0])\nprint(fruits[2])",
  "exercise10CorrectContent": "¡Genial! Has creado correctamente un array y accedido a sus elementos.\n\nExplicación:\n1. Los arrays son colecciones de valores ordenados.\n2. Usaste corchetes `[]` para crear el array.\n3. Para acceder a los elementos, usaste su índice dentro de los corchetes, comenzando desde `0`.",
  "exercise10Hint1Content": "Comienza creando un array usando corchetes `[]`.",
  "exercise10Hint2Content": "Accede a los elementos en el array usando su índice. Recuerda, los índices comienzan desde 0.",
  "exercise10SolutionContent": "La respuesta correcta es:\n\nvar numbers = [1, 2, 3]\nprint(numbers[0])\nprint(numbers[2])",
  "exercise11InstructionsContent": "Tu tarea: Crea y llama a una función que imprima un mensaje.\n\nEjemplo:\nfunc greet() @\n    print(\\\"¡Hola, Mundo!\\\")\n&\ngreet()",
  "exercise11CorrectContent": "¡Genial! Has creado y llamado a una función en Swift.\n\nExplicación:\n1. Declaraste una función usando la palabra clave `func`.\n2. Dentro de la función, usaste `print()` para mostrar un mensaje.\n3. Finalmente, llamaste a la función con su nombre seguido de `()`.",
  "exercise11Hint1Content": "Empieza declarando una función usando la palabra clave `func`.",
  "exercise11Hint2Content": "Dentro de la función, usa `print()` para mostrar un mensaje.",
  "exercise11SolutionContent": "La respuesta correcta es:\n\nfunc greet() @\n    print(\\\"¡Hola, Mundo!\\\")\n&\ngreet()",
  "exercise12InstructionsContent": "Tu tarea: Realiza operaciones aritméticas básicas.\n\nEjemplo:\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)",
  "exercise12CorrectContent": "¡Genial! Has realizado operaciones aritméticas en Swift.\n\nExplicación:\n1. Declaraste variables para los números.\n2. Realizaste suma, resta, multiplicación y división.\n3. Imprimiste los resultados en la consola.",
  "exercise12Hint1Content": "Empieza declarando dos variables usando la palabra clave `var`.",
  "exercise12Hint2Content": "Usa `+`, `-`, `*`, y `/` para las operaciones aritméticas.",
  "exercise12SolutionContent": "La respuesta correcta es:\n\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)",
  "exercise13InstructionsContent": "Tu tarea: Declara constantes e imprime sus valores.\n\nEjemplo:\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)",
  "exercise13CorrectContent": "¡Genial! Has declarado constantes en Swift.\n\nExplicación:\n1. Declaraste constantes usando `let`.\n2. Asignaste valores de diferentes tipos de datos (números, cadenas, booleanos).\n3. Imprimiste sus valores en la consola.",
  "exercise13Hint1Content": "Comienza usando la palabra clave `let` para declarar constantes.",
  "exercise13Hint2Content": "Asigna valores de diferentes tipos (por ejemplo, un número, una cadena, un booleano) a las constantes.",
  "exercise13SolutionContent": "La respuesta correcta es:\n\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)",
  "exercise14InstructionsContent": "Combina conceptos: crea una constante para pi, escribe una función para calcular áreas de círculos, usa un array de radios e imprime los resultados.",
  "exercise14CorrectContent": "¡Genial! Has combinado varios conceptos de Swift.\n\nExplicación:\n1. Declaraste una constante para el valor de pi.\n2. Creaste una función para calcular el área de un círculo.\n3. Usaste un array para almacenar los radios.\n4. Guardaste las áreas calculadas en un nuevo array e imprimiste los resultados.",
  "exercise14Hint1Content": "Declara una constante para el valor de pi usando `let`.",
  "exercise14Hint2Content": "Escribe una función que calcule el área de un círculo usando un radio.",
  "exercise14SolutionContent": "La respuesta correcta es:\n\nlet pi = 3.14159\nfunc calculateCircleArea(radius: Double) -> Double @\n    return pi * radius * radius\n&\nlet radii = [3.0, 4.5, 6.7]\nvar areas = [Double]()\nfor radius in radii @\n    areas.append(calculateCircleArea(radius: radius))\n&\nprint(areas)",
  "exercise15InstructionsContent": "Escribe dos funciones para convertir temperaturas: de Celsius a Fahrenheit y de Fahrenheit a Celsius. Usa constantes para las temperaturas e imprime los resultados.",
  "exercise15CorrectContent": "¡Fantástico! Has creado un conversor de temperaturas.\n\nExplicación:\n1. Definiste funciones para convertir Celsius a Fahrenheit y viceversa.\n2. Declaraste constantes para las temperaturas iniciales.\n3. Imprimiste los resultados de las conversiones.",
  "exercise15Hint1Content": "Define una función para Celsius a Fahrenheit usando la fórmula `(Celsius * 9 / 5) + 32`.",
  "exercise15Hint2Content": "Define una función para Fahrenheit a Celsius usando la fórmula `(Fahrenheit - 32) * 5 / 9`.",
  "exercise15SolutionContent": "La respuesta correcta es:\n\nfunc convertToFahrenheit(celsius: Double) -> Double @\n    return (celsius * 9 / 5) + 32\n&\nfunc convertToCelsius(fahrenheit: Double) -> Double @\n    return (fahrenheit - 32) * 5 / 9\n&\nlet tempInCelsius = 25.0\nlet tempInFahrenheit = 77.0\nprint(convertToFahrenheit(celsius: tempInCelsius))\nprint(convertToCelsius(fahrenheit: tempInFahrenheit))",
  "exercise3Hint1Content": "Recuerda usar la función `print()` para mostrar un mensaje en la consola.\n\nPor ejemplo:\n```swift\nprint(\"Hola, Mundo!\")\n```",
  "exercise3Hint2Content": "Asegúrate de que tu mensaje esté entre comillas dobles.\n\nEjemplo:\n```swift\nprint(\"¡Swift es divertido!\")\n```",
  "unlockExerciseTitle": "¿Desbloquear ejercicio?",
  "unlockExerciseContent": "¿Quieres desbloquear el ejercicio \"{exerciseName}\"? Puedes hacerlo de las siguientes maneras:",
  "cancel": "Cancelar",
  "buyExercise": "Comprar este ejercicio",
  "buyAllExercises": "Desbloquear todos los ejercicios",
  "restorePurchases": "Restaurar compras",
  "@unlockExerciseContent": {
    "description": "Mensaje que se muestra al preguntar al usuario si desea desbloquear un ejercicio específico",
    "placeholders": {
      "exerciseName": {
        "type": "String",
        "example": "Hola Mundo"
      }
    }
  },
  "purchaseUnavailable": "Las compras no están disponibles en este momento.",
  "purchaseInitiated": "La compra se ha iniciado.",
  "productNotFound": "Producto no encontrado.",
  "restoreSuccess": "¡Compras restauradas con éxito!",
  "restoreError": "Ocurrió un error durante la restauración.",
  "noPurchasesToRestore": "No hay compras para restaurar.",
  "unexpectedRestoreError": "Error inesperado durante la restauración.",
  "exercise151InstructionsContent": "¡Bienvenido a los conceptos básicos de Boolean! 🎉\n\nTu tarea:\n1. Declara una variable de tipo boolean usando la palabra clave `var`.\n2. Asígnale el valor `true` o `false`.\n\nEjemplo:\n```swift\nvar isSwiftFun = true\n```",
  "exercise151SolutionContent": "La solución correcta es:\n\n```swift\nvar isSwiftFun = true\n```",
  "exercise151Hint1Title": "Pista 1",
  "exercise151Hint1Content": "Usa la palabra clave `var` para declarar una variable. Asígnale un valor booleano como `true` o `false`.",
  "exercise15Hint2Title": "Pista 2",
  "exercise151Hint2Content": "Un ejemplo correcto es:\n```swift\nvar isSwiftFun = true\n```",
  "booleanExplanation": "¡Genial! Has combinado correctamente las variables booleanas utilizando operadores lógicos.\n\nExplicación:\n- El operador `&&` verifica si ambas condiciones son verdaderas.\n- El operador `||` verifica si al menos una condición es verdadera.\n\nAl usar estos operadores, puedes tomar decisiones basadas en múltiples condiciones.",
  "hint1Boolean": "Comienza declarando dos variables booleanas: `var isSunny = true` y `var isWeekend = false`.",
  "hint2Boolean": "Usa el operador `&&` para verificar si ambas condiciones son verdaderas. Por ejemplo: `var goToBeach = isSunny && isWeekend`.",
  "exerciseInstructionsBoolean": "¡Bienvenido a las Operaciones Booleanas! 🎉\n\nTu tarea:\n1. Declara dos variables booleanas: `isSunny` y `isWeekend`.\n2. Combínalas usando `&&` o `||` y asigna el resultado a `goToBeach`.\n3. Imprime el resultado.",
  "exercise16SolutionContent": "La solución correcta es:\n\n```swift\nvar isSunny = true;\nvar isWeekend = false;\nvar goToBeach = isSunny && isWeekend;\nprint(goToBeach);\n```",
  "example": "Ejemplo",
  "booleanComparisonExplanation": "¡Genial! Has usado comparaciones booleanas correctamente en Swift.\n\nExplicación:\n- `!isHot` verifica si `isHot` es `false`.\n- `!isCold` verifica si `isCold` es `false`.\n- Combinando estas condiciones con `&&` determina si el ambiente es cómodo.\n\nEste ejercicio demuestra cómo usar operadores lógicos con comparaciones para evaluar condiciones complejas.",
  "hint1BooleanComparison": "Declara dos variables booleanas: `isHot` y `isCold`. Asígnales valores como `true` o `false`.",
  "hint2BooleanComparison": "Usa el operador `!` para invertir un valor booleano, por ejemplo, `!isHot` verifica si `isHot` es `false`.",
  "exerciseInstructionsBooleanComparison": "¡Bienvenido a las Comparaciones Booleanas! 🎉\n\nTu tarea:\n1. Declara dos variables booleanas: `isHot` y `isCold`.\n2. Combínalas usando el operador `!` y el operador `&&` para determinar si `isComfortable` es `true`.\n3. Imprime el resultado.",
  "exercise17SolutionContent": "La solución correcta es:\n\n```swift\nvar isHot = false;\nvar isCold = false;\nvar isComfortable = !isHot && !isCold;\nprint(isComfortable);\n```",
  "booleanWalkingExplanation": "¡Genial! Has usado operadores lógicos para combinar valores booleanos en Swift.\n\nExplicación:\n- `isSunny` verifica si está soleado.\n- `hasUmbrella` verifica si tienes un paraguas.\n- `canGoWalking` combina estos dos valores usando el operador `||` para decidir si puedes salir a caminar.\n\nEjemplo:\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking) // true\n```",
  "hint1BooleanWalking": "Usa la palabra clave `var` para declarar las variables. Asigna valores booleanos como `true` o `false`.",
  "hint2BooleanWalking": "Combina los valores booleanos usando el operador `||`. Por ejemplo:\n```swift\nvar canGoWalking = isSunny || hasUmbrella\n```",
  "exerciseInstructionsBooleanWalking": "¡Bienvenido a Operadores Booleanos! 🎉\n\nTu tarea:\n1. Declara dos variables booleanas: `isSunny` y `hasUmbrella`.\n2. Combínalas usando el operador `||` para decidir si puedes salir a caminar.\n\nEjemplo:\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```",
  "exercise18SolutionContent": "La solución correcta es:\n\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```",
  "logicalOperatorsExplanation": "¡Genial! Has utilizado operadores lógicos correctamente para decidir si puedes salir.\n\nExplicación:\n- `isRaining` verifica si está lloviendo.\n- `haveUmbrella` verifica si tienes un paraguas.\n- `canGoOutside` combina estos valores usando el operador `||` para determinar si puedes salir.\n\nEjemplo:\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\nprint(canGoOutside)\n```",
  "hint1LogicalOperators": "Declara dos variables: `isRaining` y `haveUmbrella`. Asígnales valores booleanos como `true` o `false`.",
  "hint2LogicalOperators": "Combina las variables usando los operadores lógicos `&&` y `||`.",
  "exerciseInstructionsLogicalOperators": "¡Bienvenido al ejercicio de Operadores Lógicos! 🎉\n\nTu tarea:\n1. Declara dos variables booleanas: `isRaining` y `haveUmbrella`.\n2. Usa el operador `||` para decidir si puedes salir.\n\nEjemplo:\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\n```",
  "exercise19SolutionContent": "La solución correcta es:\n\n```swift\nvar isRaining = true;\nvar haveUmbrella = true;\nvar canGoOutside = !isRaining || haveUmbrella;\nprint(canGoOutside);\n```",
  "logicalOrExplanation": "¡Genial! Has usado correctamente el operador lógico OR en Swift.\n\nExplicación:\n- El operador `||` devuelve `true` si **alguna** de las condiciones es verdadera.\n- Ejemplo: `let isSunny = true || false` evalúa como `true` porque una de las condiciones es verdadera.",
  "hint1LogicalOr": "Usa el operador `||` para verificar si **alguna** de las dos condiciones es verdadera.",
  "hint2LogicalOr": "Una sintaxis de ejemplo es:\n```swift\nlet isSunny = true || false\n```",
  "exerciseInstructionsLogicalOr": "¡Bienvenido a los fundamentos del operador lógico OR! 🎉\n\nTu tarea:\n1. Usa la palabra clave `let` para declarar una constante.\n2. Asígnale un valor que use el operador lógico OR (`||`).\n\nEjemplo:\n```swift\nlet isSunny = true || false\n```",
  "exercise20SolutionContent": "La solución correcta es:\n\n```swift\nlet isSunny = true || false\n```",
  "booleanNegationExplanation": "¡Genial! Has usado correctamente el operador de negación booleano en Swift.\n\nExplicación:\n- El operador `!` niega un valor booleano. Por ejemplo, si `isSwiftFun` es `true`, `!isSwiftFun` se convierte en `false`.",
  "hint1BooleanNegation": "Usa la palabra clave `var` para declarar dos variables. Asigna un valor booleano a una y su negación a la otra.",
  "hint2BooleanNegation": "Un ejemplo correcto es:\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exerciseInstructionsBooleanNegation": "¡Bienvenido a la Negación Booleana! 🎉\n\nTu tarea:\n1. Declara una variable booleana usando la palabra clave `var`.\n2. Declara otra variable y asígnale el valor negado de la primera variable.\n\nEjemplo:\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exercise21SolutionContent": "La solución correcta es:\n\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "booleanShortCircuitExplanation": "¡Genial! Has trabajado correctamente con la evaluación de cortocircuito booleana en Swift.\n\nExplicación:\n- El operador `||` evalúa como `true` si alguna de las condiciones es verdadera, sin evaluar la segunda si la primera ya es verdadera.\n- El operador `&&` evalúa como `true` solo si ambas condiciones son verdaderas.",
  "hint1BooleanShortCircuit": "Intenta usar el operador `||` para 'OR' y `&&` para 'AND'.",
  "hint2BooleanShortCircuit": "Recuerda que `||` evalúa la primera condición primero, mientras que `&&` requiere que ambas condiciones sean verdaderas.",
  "exerciseInstructionsBooleanShortCircuit": "¡Bienvenido a la Evaluación de Cortocircuito Booleana! 🎉\n\nTu tarea:\n1. Declara una variable usando la palabra clave `var`.\n2. Usa los operadores `||` (OR) y `&&` (AND) para crear una expresión booleana.\n\nEjemplo:\n```swift\nvar result = (true || false) && true\n```",
  "exercise22SolutionContent": "La solución correcta es:\n\n```swift\nvar result = (true || false) && true\n```",
  "ternaryOperatorExplanation": "¡Genial! Has usado correctamente el operador ternario condicional en Swift.\n\nExplicación:\n- El operador ternario `? :` te permite elegir entre dos valores según una condición.\n- Ejemplo:\n```swift\nvar message = (true ? \"¡Swift es genial!\" : \"Swift está bien\")\n```\nAquí, `message` contendrá el valor \"¡Swift es genial!\" porque la condición es `true`.",
  "hint1TernaryOperator": "Usa el operador ternario `? :` para elegir entre dos valores según una condición.",
  "hint2TernaryOperator": "Un ejemplo correcto es:\n```swift\nvar message = (true ? \"¡Swift es genial!\" : \"Swift está bien\")\n```",
  "exerciseInstructionsTernaryOperator": "¡Bienvenido al Operador Ternario Condicional! 🎉\n\nTu tarea:\n1. Declara una variable usando la palabra clave `var`.\n2. Usa el operador ternario `? :` para asignarle un valor según una condición booleana.\n\nEjemplo:\n```swift\nvar message = (true ? \"¡Swift es genial!\" : \"Swift está bien\")\n```",
  "exercise23SolutionContent": "La solución correcta es:\n\n```swift\nvar message = (true ? \"¡Swift es genial!\" : \"Swift está bien\")\n```",
  "ifElseExplanation": "¡Genial! Has usado correctamente un booleano en una declaración `if-else`.\n\nExplicación:\n- Las variables booleanas se pueden usar en declaraciones condicionales para controlar el flujo del programa.\n- Ejemplo:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"¡Swift es increíble!\")\n& else @\n  print(\"¡Sigue intentándolo!\")\n&\n```",
  "hint1IfElse": "Declara una variable booleana usando `var`. Úsala en una declaración `if-else` para controlar lo que se imprime.",
  "hint2IfElse": "Un ejemplo correcto es:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"¡Swift es increíble!\")\n& else @\n  print(\"¡Sigue intentándolo!\")\n&\n```",
  "exerciseInstructionsIfElse": "¡Bienvenido a Booleanos en If-Else Statements! 🎉\n\nTu tarea:\n1. Declara una variable booleana usando la palabra clave `var`.\n2. Usa una declaración `if-else` para imprimir uno de los dos mensajes dependiendo del valor del booleano.\n\nEjemplo:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"¡Swift es increíble!\")\n& else @\n  print(\"¡Sigue intentándolo!\")\n&\n```",
  "exercise24SolutionContent": "La solución correcta es:\n\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"¡Swift es increíble!\")\n& else @\n  print(\"¡Sigue intentándolo!\")\n&\n```",
  "nestedIfExplanation": "¡Genial! Has usado correctamente declaraciones `if` anidadas con booleanos.\n\nExplicación:\n- Este ejercicio demuestra cómo usar declaraciones `if` anidadas para manejar múltiples condiciones.\n- Ejemplo:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"¡Lo lograste!\")\n  & else @\n    print(\"¡Casi lo consigues!\")\n  &\n& else @\n  print(\"¡Inténtalo de nuevo!\")\n&\n```",
  "hint1NestedIf": "Usa la palabra clave `var` para declarar dos variables booleanas. Usa declaraciones `if` anidadas para verificar cada condición.",
  "hint2NestedIf": "Un ejemplo correcto es:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"¡Lo lograste!\")\n  & else @\n    print(\"¡Casi lo consigues!\")\n  &\n& else @\n  print(\"¡Inténtalo de nuevo!\")\n&\n```",
  "exerciseInstructionsNestedIf": "¡Bienvenido a Declaraciones If Anidadas con Booleanos! 🎉\n\nTu tarea:\n1. Declara dos variables booleanas usando la palabra clave `var`.\n2. Usa declaraciones `if` anidadas para verificar ambas condiciones.\n\nEjemplo:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"¡Lo lograste!\")\n  & else @\n    print(\"¡Casi lo consigues!\")\n  &\n& else @\n  print(\"¡Inténtalo de nuevo!\")\n&\n```",
  "exercise25SolutionContent": "La solución correcta es:\n\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"¡Lo lograste!\")\n  & else @\n    print(\"¡Casi lo consigues!\")\n  &\n& else @\n  print(\"¡Inténtalo de nuevo!\")\n&\n```",
  "passwordValidatorExplanation": "¡Genial! Has creado un validador de contraseñas usando booleanos.\n\nExplicación:\n- Este ejercicio combina operaciones con cadenas y lógica booleana.\n- Una contraseña segura debe:\n  1. Tener al menos 8 caracteres.\n  2. Contener un símbolo `@`.\n  3. Contener un símbolo `$`.\n\nEjemplo de solución:\n```swift\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"¡Contraseña segura!\");\n> else <\n  print(\"Contraseña débil.\");\n>```",
  "hint1PasswordValidator": "Declara una variable llamada `password` con un valor de cadena. Usa `.contains` para comprobar los símbolos `@` y `$`.",
  "hint2PasswordValidator": "Combina las condiciones con el operador `&&`:\nUsa `if password.contains(\"@\") && password.contains(\"$\")`.",
  "passwordValidatorInstructions": "¡Bienvenido al Desafío de Validador de Contraseñas! 🎉\n\nTu tarea:\n1. Declara una variable llamada `password` y asígnale un valor de cadena.\n2. Usa declaraciones `if` para verificar si la contraseña contiene:\n   - Al menos 8 caracteres.\n   - Un símbolo `@`.\n   - Un símbolo `$`.\n3. Si la contraseña cumple con todos los criterios, imprime `¡Contraseña segura!`. Si no, imprime `Contraseña débil.`.",
  "exercise26SolutionContent": "La solución correcta es:\n\n```swift\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"¡Contraseña segura!\");\n> else <\n  print(\"Contraseña débil.\");\n>```",
  "gameLogicExplanation": "¡Genial! Has implementado correctamente una lógica de juego usando booleanos y condiciones.\n\nExplicación:\n- Declaraste las variables `isAlive` y `health`.\n- Usaste una constante `damage` para restar a la salud.\n- Comprobaste si la salud era menor o igual a 0 para determinar si el juego ha terminado.",
  "hint1GameLogic": "Declara las variables `isAlive`, `health` y una constante `damage`. Usa `if` para comprobar la salud.",
  "hint2GameLogic": "Recuerda usar:\n- `health -= damage` para restar salud.\n- `if (health <= 0)` para comprobar las condiciones de fin de juego.",
  "gameLogicInstructions": "¡Bienvenido al Desafío de Lógica de Juego con Booleanos! 🎮\n\nTu tarea:\n1. Declara `isAlive` como `true`.\n2. Declara `health` como `100`.\n3. Resta `damage` a `health`.\n4. Imprime `Game Over` si `health <= 0`. Si no, imprime `Keep Playing!`.\n\nEjemplo:\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\nº else #\n  print(\"Keep Playing!\");\nº",
  "exercise27SolutionContent": "La solución correcta es:\n\n```swift\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\nº else #\n  print(\"Keep Playing!\");\n\\n```",
  "quizLogicExplanation": "¡Genial! Has implementado correctamente una lógica de cuestionario usando booleanos y condiciones.\n\nExplicación:\n- `isAnswerCorrect` es una constante booleana que almacena la respuesta del usuario.\n- Una condición `if` verifica su valor y muestra el mensaje correspondiente.",
  "hint1QuizLogic": "Usa una constante booleana llamada `isAnswerCorrect`. Escribe una condición `if` para verificar su valor.",
  "hint2QuizLogic": "Un ejemplo correcto es:\n```swift\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"Correct Answer! 🎉\");\nº else #\n  print(\"Try Again!\");\nº\n```",
  "quizLogicInstructions": "¡Bienvenido al Desafío de Lógica de Cuestionario! 🧠\n\nTu tarea:\n1. Declara `isAnswerCorrect` como una constante booleana.\n2. Escribe una estructura `if-else` para comprobar si la respuesta es correcta.\n3. Si es correcta, imprime `Correct Answer! 🎉`. De lo contrario, imprime `Try Again!`.",
  "exercise28SolutionContent": "La solución correcta es:\n\n```swift\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"Correct Answer! 🎉\");\nº else #\n  print(\"Try Again!\");\nº\n```",
  "booleanGuessExplanation": "¡Increíble! Has implementado un juego de adivinanzas utilizando booleanos.\n\nExplicación:\n- `secretBoolean` contiene un valor oculto.\n- El usuario compara su conjetura con este valor usando el operador `==`.\n- Basado en la comparación, se muestra el mensaje correspondiente.",
  "hint1BooleanGuess": "Usa una constante `secretBoolean` con un valor booleano. Declara otra constante `userGuess` y compara ambas usando `==`.",
  "hint2BooleanGuess": "Un ejemplo correcto es:\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"¡Acertaste! 🎉\");\nº else #\n  print(\"Respuesta incorrecta. Inténtalo de nuevo.\");\nº\n```",
  "booleanGuessInstructions": "¡Bienvenido al Reto de Adivinanzas Booleanas! 🧠\n\nTu tarea:\n1. Declara una constante `secretBoolean` con un valor booleano.\n2. Declara una constante `userGuess` representando la entrada del usuario.\n3. Compara ambas usando el operador `==`.\n4. Si la conjetura es correcta, imprime `¡Acertaste! 🎉`. De lo contrario, imprime `Respuesta incorrecta. Inténtalo de nuevo.`",
  "exercise29SolutionContent": "La solución correcta es:\n\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"¡Acertaste! 🎉\");\nº else #\n  print(\"Respuesta incorrecta. Inténtalo de nuevo.\");\nº\n```",
  "booleanLogicExplanation": "¡Increíble! Has utilizado operadores lógicos para evaluar condiciones con éxito.\n\nExplicación:\n- `isUserLoggedIn` y `hasPremiumAccess` son constantes booleanas.\n- Usaste el operador `&&` (AND) para verificar si ambas son verdaderas.\n- Según la evaluación, imprimiste el mensaje correspondiente.",
  "hint1BooleanLogic": "Usa dos constantes `isUserLoggedIn` y `hasPremiumAccess` con valores booleanos.\nVerifica ambas condiciones usando el operador `&&`.",
  "hint2BooleanLogic": "Un ejemplo correcto es:\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"¡Acceso otorgado a la función premium!\");\nº else #\n  print(\"Acceso denegado. Por favor inicia sesión o mejora tu cuenta.\");\nº\n```",
  "booleanLogicInstructions": "¡Bienvenido al Juego de Operadores Lógicos! 🧠\n\nTu tarea:\n1. Declara dos constantes: `isUserLoggedIn` y `hasPremiumAccess`.\n2. Usa el operador `&&` para verificar si ambas condiciones son verdaderas.\n3. Si es así, imprime `¡Acceso otorgado a la función premium!`.\n4. De lo contrario, imprime `Acceso denegado. Por favor inicia sesión o mejora tu cuenta.`",
  "exercise30SolutionContent": "La solución correcta es:\n\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"¡Acceso otorgado a la función premium!\");\nº else #\n  print(\"Acceso denegado. Por favor inicia sesión o mejora tu cuenta.\");\nº\n```",
  "exercise31IntroTitle": "Instrucciones del Ejercicio",
  "exercise31IntroContent": "¡Bienvenido a los fundamentos de If-Else! 🎉\n\nTu tarea:\n1. Declara una variable `score` y asígnale un valor.\n2. Usa un bloque `if` para comprobar una condición (por ejemplo, si la puntuación es mayor a 70).\n3. Imprime `Aprobado` si la condición es verdadera; de lo contrario, imprime `Reprobado`.",
  "exercise31CorrectTitle": "¡Correcto! 🎉",
  "exercise31CorrectContent": "¡Genial! Has usado correctamente una declaración if-else en Swift.\n\nExplicación:\n- El bloque `if` se ejecuta cuando la condición es verdadera.\n- El bloque `else` se ejecuta cuando la condición es falsa.\n\nEsto te permite tomar decisiones basadas en condiciones en tu código.",
  "exercise31Hint1Title": "Pista 1",
  "exercise31Hint1Content": "Comienza declarando una variable, por ejemplo, `var score = 80`. Usa un bloque `if` para comprobar el valor.",
  "exercise31Hint2Title": "Pista 2",
  "exercise31Hint2Content": "Una estructura de ejemplo podría ser:\n```swift\nif (score > 70) #\n  print(\"Aprobado\");\nº else #\n  print(\"Reprobado\");\nº```",
  "exercise31SolutionTitle": "Solución",
  "exercise31SolutionContent": "La solución correcta es:\n```swift\nvar score = 80;\nif (score > 70) #\n  print(\"Aprobado\");\nº else #\n  print(\"Reprobado\");\nº```",
  "exercise31Example": "Ejemplo:\n1  var score = 80;\n2  if (score > 70) #\n3      print(\"Aprobado\");\n4  º else #\n5      print(\"Reprobado\");\n6  º",
  "exercise31Hint": "Ingresa tu código aquí",
  "exercise32IntroTitle": "Instrucciones del Ejercicio",
  "exercise32IntroContent": "¡Bienvenido a If-Else con Múltiples Condiciones! 🎉\n\nTu tarea:\n1. Declara una variable `temperature` y asígnale un valor.\n2. Usa `if` para verificar si es mayor o igual a 30 e imprime 'Hace calor'.\n3. Usa `else if` para verificar si es menor de 15 e imprime 'Hace frío'.\n4. Usa `else` para manejar todos los demás casos e imprime 'Hace templado'.",
  "exercise32CorrectTitle": "¡Correcto! 🎉",
  "exercise32CorrectContent": "¡Genial! Has usado correctamente if-else con múltiples condiciones en Swift.\n\nExplicación:\n- `if` se usa para la primera condición.\n- `else if` permite realizar comprobaciones adicionales.\n- `else` maneja todos los demás casos.\n\nEsta estructura es útil para comprobar múltiples posibilidades.",
  "exercise32Hint1Title": "Pista 1",
  "exercise32Hint1Content": "Comienza declarando una variable, por ejemplo, `var temperature = 25`. Usa `if` para verificar su valor.",
  "exercise32Hint2Title": "Pista 2",
  "exercise32Hint2Content": "Una estructura de ejemplo podría ser:\n```swift\nif (temperature >= 30) #\n  print(\"Hace calor\");\nº else if (temperature < 15) #\n  print(\"Hace frío\");\nº else #\n  print(\"Hace templado\");\nº```",
  "exercise32SolutionTitle": "Solución",
  "exercise32SolutionContent": "La solución correcta es:\n```swift\nvar temperature = 25;\nif (temperature >= 30) #\n  print(\"Hace calor\");\nº else if (temperature < 15) #\n  print(\"Hace frío\");\nº else #\n  print(\"Hace templado\");\nº```",
  "exercise32Example": "Ejemplo:\n1  var temperature = 25;\n2  if (temperature >= 30) #\n3      print(\"Hace calor\");\n4  º else if (temperature < 15) #\n5      print(\"Hace frío\");\n6  º else #\n7      print(\"Hace templado\");\n8  º",
  "exercise32Hint": "Ingresa tu código aquí",
  "exercise33IntroTitle": "Instrucciones del Ejercicio",
  "exercise33IntroContent": "¡Bienvenido a If-Else con Comparaciones de Igualdad! 🎉\n\nTu tarea:\n1. Declara una variable `password` y asígnale el valor \"swift\".\n2. Usa una declaración `if` para verificar si `password` es igual a \"swift\".\n3. Imprime \"Acceso concedido\" si es verdadero, o \"Acceso denegado\" en caso contrario.",
  "exercise33CorrectTitle": "¡Correcto! 🎉",
  "exercise33CorrectContent": "¡Genial! Has usado correctamente if-else con comparaciones de igualdad en Swift.\n\nExplicación:\n- Usa `==` para comparar si dos valores son iguales.\n- Si son iguales, se ejecuta el bloque `if`.\n- De lo contrario, se ejecuta el bloque `else`.\n\nEsto es esencial para la toma de decisiones en programas.",
  "exercise33Hint1Title": "Pista 1",
  "exercise33Hint1Content": "Comienza declarando una variable, por ejemplo, `var password = \"swift\"`. Luego usa una declaración `if` para verificar si es igual a \"swift\".",
  "exercise33Hint2Title": "Pista 2",
  "exercise33Hint2Content": "Estructura tu código así:\n```swift\nif (password == \"swift\") #\n  print(\"Acceso concedido\");\nº else #\n  print(\"Acceso denegado\");\nº```",
  "exercise33SolutionTitle": "Solución",
  "exercise33SolutionContent": "La solución correcta es:\n```swift\nvar password = \"swift\";\nif (password == \"swift\") #\n  print(\"Acceso concedido\");\nº else #\n  print(\"Acceso denegado\");\nº```",
  "exercise33Example": "Ejemplo:\n1  var password = \"swift\";\n2  if (password == \"swift\") #\n3      print(\"Acceso concedido\");\n4  º else #\n5      print(\"Acceso denegado\");\n6  º",
  "exercise33Hint": "Ingresa tu código aquí",
  "exercise34IntroTitle": "Instrucciones del Ejercicio",
  "exercise34IntroContent": "¡Bienvenido a If-Else con Operadores de Comparación! 🎉\n\nTu tarea:\n1. Declara una variable `age` y asígnale un número.\n2. Usa una declaración `if` para verificar si `age >= 18`.\n3. Imprime \"Eres un adulto\" si es verdadero, o \"Eres menor de edad\" en caso contrario.",
  "exercise34CorrectTitle": "¡Correcto! 🎉",
  "exercise34CorrectContent": "¡Genial! Has usado correctamente `if-else` con operadores de comparación.\n\nExplicación:\n- El operador `>=` verifica si un valor es mayor o igual a otro.\n- Esto es útil para la toma de decisiones basadas en comparaciones numéricas.",
  "exercise34Hint1Title": "Pista 1",
  "exercise34Hint1Content": "Declara una variable `age` y asígnale un número, por ejemplo, `var age = 16`. Luego usa una declaración `if` para verificar si `age >= 18`.",
  "exercise34Hint2Title": "Pista 2",
  "exercise34Hint2Content": "Estructura tu código así:\n```swift\nif (age >= 18) #\n  print(\"Eres un adulto\");\nº else #\n  print(\"Eres menor de edad\");\nº```",
  "exercise34SolutionTitle": "Solución",
  "exercise34SolutionContent": "La solución correcta es:\n```swift\nvar age = 16;\nif (age >= 18) #\n  print(\"Eres un adulto\");\nº else #\n  print(\"Eres menor de edad\");\nº```",
  "exercise34Example": "Ejemplo:\n1  var age = 16;\n2  if (age >= 18) #\n3      print(\"Eres un adulto\");\n4  º else #\n5      print(\"Eres menor de edad\");\n6  º",
  "exercise34Hint": "Ingresa tu código aquí",
  "exercise35IntroTitle": "Instrucciones del Ejercicio",
  "exercise35IntroContent": "¡Bienvenido a la introducción de If-Else anidados! 🎉\n\nTu tarea:\n1. Declara una variable `score` y asígnale un número.\n2. Usa declaraciones `if-else` para determinar:\n   - `Excelente` para puntuaciones de 90 o más.\n   - `Aprobado` para puntuaciones de 60 a 89.\n   - `Reprobado` para puntuaciones inferiores a 60.\n3. Imprime la categoría correspondiente.",
  "exercise35CorrectTitle": "¡Correcto! 🎉",
  "exercise35CorrectContent": "¡Genial! Has usado correctamente las declaraciones `if-else` anidadas.\n\nExplicación:\n- Las estructuras `if-else` anidadas permiten evaluar múltiples condiciones en secuencia.\n- En este ejercicio, el programa evalúa una puntuación y determina la categoría correspondiente.",
  "exercise35Hint1Title": "Pista 1",
  "exercise35Hint1Content": "Empieza declarando una variable `score` y asígnale un valor, por ejemplo, `var score = 75`.",
  "exercise35Hint2Title": "Pista 2",
  "exercise35Hint2Content": "Usa declaraciones `if-else` anidadas para verificar el puntaje:\n```swift\nif (score >= 90) #\n  print(\"Excelente\");\nº else #\n  if (score >= 60) #\n    print(\"Aprobado\");\n  º else #\n    print(\"Reprobado\");\n  º\nº```",
  "exercise35SolutionTitle": "Solución",
  "exercise35SolutionContent": "La solución correcta es:\n```swift\nvar score = 75;\nif (score >= 90) #\n  print(\"Excelente\");\nº else #\n  if (score >= 60) #\n    print(\"Aprobado\");\n  º else #\n    print(\"Reprobado\");\n  º\nº```",
  "exercise35Example": "Ejemplo:\n1  var score = 75;\n2  if (score >= 90) #\n3      print(\"Excelente\");\n4  º else #\n5      if (score >= 60) #\n6          print(\"Aprobado\");\n7      º else #\n8          print(\"Reprobado\");\n9      º\n10  º",
  "exercise35Hint": "Ingresa tu código aquí",
  "exercise36IntroTitle": "Instrucciones del Ejercicio",
  "exercise36IntroContent": "¡Bienvenido a If-Else con Strings! 🎉\n\nTu tarea:\n1. Declara una variable llamada `fruit` y asígnale un valor de cadena.\n2. Usa `if` para comprobar si la cadena coincide con un valor específico e imprime el resultado.\n3. Usa `else` para manejar otros casos.\n\nEjemplo:\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"Es una manzana!\");\nº else #\n    print(\"No es una manzana!\");\nº```",
  "exercise36CorrectTitle": "¡Correcto! 🎉",
  "exercise36CorrectContent": "¡Genial! Has usado correctamente `if-else` para evaluar condiciones de cadenas.\n\nExplicación:\n- Las cadenas se pueden comparar usando el operador `==`.\n- Usa `if` para verificar si una cadena coincide con un valor específico.",
  "exercise36Hint1Title": "Pista 1",
  "exercise36Hint1Content": "Empieza declarando una variable `fruit` y asígnale un valor de cadena, por ejemplo, `var fruit = \"apple\"`.",
  "exercise36Hint2Title": "Pista 2",
  "exercise36Hint2Content": "Usa `if-else` para comprobar si el valor coincide con una condición:\n- Si `fruit == \"apple\"`, imprime \"¡Es una manzana!\".",
  "exercise36SolutionTitle": "Solución",
  "exercise36SolutionContent": "La solución correcta es:\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"¡Es una manzana!\");\nº else #\n    print(\"¡No es una manzana!\");\nº```",
  "exercise36Example": "Ejemplo:\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"¡Es una manzana!\");\nº else #\n    print(\"¡No es una manzana!\");\nº```",
  "exercise36Hint": "Ingresa tu código aquí",
  "exercise37IntroTitle": "Instrucciones del Ejercicio",
  "exercise37IntroContent": "¡Bienvenido a Comparaciones Numéricas! 🎉\n\nTu tarea:\n1. Declara una variable llamada `temperature` y asígnale un valor numérico.\n2. Usa `if` para verificar si el valor es mayor, menor o igual a un número específico.\n3. Usa `else` para manejar otros casos.\n\nEjemplo:\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"¡Hace calor!\");\nº else #\n    print(\"¡Hace frío!\");\nº```",
  "exercise37CorrectTitle": "¡Correcto! 🎉",
  "exercise37CorrectContent": "¡Genial! Has usado correctamente `if-else` para comparar valores numéricos.\n\nExplicación:\n- Usa operadores como `>`, `<`, `>=` y `<=` para evaluar números.\n- El código dentro de `if` se ejecuta si la condición es verdadera; de lo contrario, se ejecuta el bloque `else`.",
  "exercise37Hint1Title": "Pista 1",
  "exercise37Hint1Content": "Comienza declarando una variable `temperature` y asignándole un número, por ejemplo, `var temperature = 25`.",
  "exercise37Hint2Title": "Pista 2",
  "exercise37Hint2Content": "Usa `if` para comparar `temperature` con otro número, por ejemplo, `if (temperature > 20) # ... º`.",
  "exercise37SolutionTitle": "Solución",
  "exercise37SolutionContent": "La solución correcta es:\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"¡Hace calor!\");\nº else #\n    print(\"¡Hace frío!\");\nº```",
  "exercise37Example": "Ejemplo:\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"¡Hace calor!\");\nº else #\n    print(\"¡Hace frío!\");\nº```",
  "exercise37Hint": "Ingresa tu código aquí",
  "exercise38IntroTitle": "Instrucciones del Ejercicio",
  "exercise38IntroContent": "¡Bienvenido a Sentencias If-Else Anidadas! 🎉\n\nTu tarea:\n1. Declara una variable llamada `number` y asígnale un valor entero.\n2. Usa una estructura `if-else` para clasificar el número como positivo, negativo o cero.\n\nEjemplo:\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"Positivo\");\nº else if (number < 0) #\n  print(\"Negativo\");\nº else #\n  print(\"Cero\");\nº```",
  "exercise38CorrectTitle": "¡Correcto! 🎉",
  "exercise38CorrectContent": "¡Genial! Has implementado correctamente una estructura `if-else` anidada para manejar múltiples condiciones.\n\nExplicación:\n- Si el número es mayor que 0, es un número positivo.\n- Si el número es menor que 0, es un número negativo.\n- De lo contrario, el número es cero.\n\nEsta es una forma sencilla de categorizar números según sus valores.",
  "exercise38Hint1Title": "Pista 1",
  "exercise38Hint1Content": "Comienza declarando una variable `number` y asignándole un valor.\nUsa `if (number > 0)` para verificar si el número es positivo.",
  "exercise38Hint2Title": "Pista 2",
  "exercise38Hint2Content": "Agrega una condición `else if (number < 0)` para verificar si el número es negativo.",
  "exercise38SolutionTitle": "Solución",
  "exercise38SolutionContent": "La solución correcta es:\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"Positivo\");\nº else if (number < 0) #\n  print(\"Negativo\");\nº else #\n  print(\"Cero\");\nº```",
  "exercise38Example": "Ejemplo:\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"Positivo\");\nº else if (number < 0) #\n  print(\"Negativo\");\nº else #\n  print(\"Cero\");\nº```",
  "exercise38Hint": "Ingresa tu código aquí",
  "exercise39IntroTitle": "Instrucciones del ejercicio",
  "exercise39IntroContent": "¡Bienvenido al desafío de If-Else anidado! 🎉\n\nTu tarea es determinar el tipo de bono que recibe un empleado:\n\n1. Declara las variables `yearsOfService` (entero) y `performanceRating` (entero).\n2. Usa una estructura `if-else` anidada:\n   - `Alto Bono`: `yearsOfService >= 10` y `performanceRating >= 8`.\n   - `Bono Moderado`: `yearsOfService >= 10` pero `performanceRating < 8`.\n   - `Bono Mínimo`: `yearsOfService < 10`.\n3. Imprime el tipo de bono.",
  "exercise39CorrectTitle": "¡Correcto! 🎉",
  "exercise39CorrectContent": "¡Buen trabajo! Has implementado correctamente una lógica `if-else` anidada para determinar los bonos de los empleados.\n\n**Explicación:**\n- Empleados con `yearsOfService >= 10` y `performanceRating >= 8` reciben un `Alto Bono`.\n- Empleados con `yearsOfService >= 10` pero `performanceRating < 8` reciben un `Bono Moderado`.\n- Empleados con `yearsOfService < 10` reciben un `Bono Mínimo`.\n\nEste ejercicio te ayuda a entender condiciones anidadas y toma de decisiones en Swift.",
  "exercise39Hint1Title": "Pista 1",
  "exercise39Hint1Content": "Comienza declarando las variables: `yearsOfService` y `performanceRating` como enteros.",
  "exercise39Hint2Title": "Pista 2",
  "exercise39Hint2Content": "Usa una estructura `if-else` anidada. Evalúa primero `yearsOfService` y luego `performanceRating`.",
  "exercise39SolutionTitle": "Solución",
  "exercise39SolutionContent": "La solución correcta es:\n```swift\nvar yearsOfService = 12;\nvar performanceRating = 9;\nif yearsOfService >= 10 #\n    if performanceRating >= 8 #\n        print(\"Alto Bono\");\n    º else #\n        print(\"Bono Moderado\");\n    º\nº else #\n    print(\"Bono Mínimo\");\nº",
  "exercise39Example": "Ejemplo:\n```swift\nvar yearsOfService = 12;\nvar performanceRating = 9;\nif yearsOfService >= 10 #\n    if performanceRating >= 8 #\n        print(\"Alto Bono\");\n    º else #\n        print(\"Bono Moderado\");\n    º\nº else #\n    print(\"Bono Mínimo\");\nº",
  "exercise39Hint": "Ingresa tu código aquí",
  "exercise40IntroTitle": "Instrucciones del ejercicio",
  "exercise40IntroContent": "Tu tarea es implementar un sistema de calificación:\n\n1. Declara variables `score` (entero) y `participation` (booleano).\n2. Usa condiciones `if-else`:\n   - `A` para `score >= 90` y `participation == true`.\n   - `B` para `score >= 80`.\n   - `C` para `score >= 70`.\n   - `D` para `score >= 60`.\n   - `F` en caso contrario.\n3. Imprime la calificación.",
  "exercise40CorrectTitle": "¡Correcto! 🎉",
  "exercise40CorrectContent": "¡Bien hecho! Has implementado un sistema de calificación con múltiples condiciones.\n\n**Explicación:**\n- Se asigna `A` para `score >= 90` y `participation == true`.\n- Otras calificaciones se evalúan secuencialmente en orden descendente.\n\nEste enfoque ayuda a tomar decisiones con múltiples criterios.",
  "exercise40Hint1Title": "Pista 1",
  "exercise40Hint1Content": "Comienza declarando las variables: `score` (entero) y `participation` (booleano).",
  "exercise40Hint2Title": "Pista 2",
  "exercise40Hint2Content": "Usa `if` para la condición más alta:\nif score >= 90 && participation == true # ... º\ny `else if` para otros rangos.",
  "exercise40SolutionTitle": "Solución",
  "exercise40SolutionContent": "La solución correcta es:\n```swift\nvar score = 85;\nvar participation = true;\nif score >= 90 && participation == true #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise40Example": "Ejemplo:\n```swift\nvar score = 85;\nvar participation = true;\nif score >= 90 && participation == true #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise40Hint": "Ingresa tu código aquí",
  "exercise41IntroTitle": "Instrucciones del Ejercicio",
  "exercise41IntroContent": "Tu tarea es evaluar la admisión universitaria:\n\n1. `gpa` debe ser >= 3.5.\n2. `hasRecommendation` debe ser `true`.\n3. `isExtraCurricularActive` debe ser `true`.\n\nImprime `Admitted` si cumple todos los criterios. De lo contrario, imprime `Not Admitted`.",
  "exercise41CorrectTitle": "¡Correcto! 🎉",
  "exercise41CorrectContent": "¡Bien hecho! Has implementado exitosamente un sistema de evaluación de admisión.",
  "exercise41Hint1Title": "Pista 1",
  "exercise41Hint1Content": "Declara las variables:\n- `gpa` (por ejemplo, `3.8`)\n- `hasRecommendation` (por ejemplo, `true`)\n- `isExtraCurricularActive` (por ejemplo, `true`).",
  "exercise41Hint2Title": "Pista 2",
  "exercise41Hint2Content": "Usa `if` para evaluar las condiciones:\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true # ... º",
  "exercise41SolutionTitle": "Solución",
  "exercise41SolutionContent": "```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise41Example": "Ejemplo:\n```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise41Hint": "Escribe tu código aquí",
  "exercise42IntroTitle": "Instrucciones del Ejercicio",
  "exercise42IntroContent": "Crea un programa para evaluar la admisión universitaria basado en:\n\n1. `gpa` (por ejemplo, `3.8`) debe ser >= 3.5.\n2. `hasRecommendation` debe ser `true`.\n3. `isExtraCurricularActive` debe ser `true`.\n\nSi se cumplen todos los criterios, imprime `Admitted`. De lo contrario, imprime `Not Admitted`.",
  "exercise42CorrectTitle": "¡Correcto! 🎉",
  "exercise42CorrectContent": "¡Bien hecho! Has creado un sistema de evaluación de admisión.\n\n**Explicación:**\n- `gpa >= 3.5` asegura la elegibilidad académica.\n- `hasRecommendation` verifica las cartas de recomendación.\n- `isExtraCurricularActive` asegura la participación extracurricular.\n\nSolo se admiten estudiantes que cumplan con todos estos criterios.",
  "exercise42Hint1Title": "Pista 1",
  "exercise42Hint1Content": "Empieza declarando las variables:\n- `var gpa = 3.8`\n- `var hasRecommendation = true`\n- `var isExtraCurricularActive = true`",
  "exercise42Hint2Title": "Pista 2",
  "exercise42Hint2Content": "Usa `if` para evaluar las condiciones. Ejemplo:\n```swift\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise42SolutionTitle": "Solución",
  "exercise42SolutionContent": "```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise42Example": "Ejemplo:\n```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise42Hint": "Escribe tu código aquí",
  "exercise43IntroTitle": "Instrucciones del Ejercicio",
  "exercise43IntroContent": "Crea un programa que evalúe la calificación de un estudiante según su `score`:\n\n1. Si `score` es >= 90, imprime `A`.\n2. Si `score` es >= 80, imprime `B`.\n3. Si `score` es >= 70, imprime `C`.\n4. Si `score` es >= 60, imprime `D`.\n5. Si `score` es menor a 60, imprime `F`.",
  "exercise43CorrectTitle": "¡Correcto! 🎉",
  "exercise43CorrectContent": "¡Muy bien! Has implementado con éxito un sistema de evaluación de calificaciones.\n\n**Explicación:**\n- Cada `if` o `else if` verifica si el `score` está dentro de un rango.\n- Según el puntaje, se imprime la calificación correspondiente.\n\nEsta estructura es eficiente para evaluar múltiples condiciones en escenarios de toma de decisiones.",
  "exercise43Hint1Title": "Pista 1",
  "exercise43Hint1Content": "Comienza declarando una variable `score`. Ejemplo: `var score = 85`.",
  "exercise43Hint2Title": "Pista 2",
  "exercise43Hint2Content": "Usa declaraciones `if-else if-else` para comparar los valores de `score` y imprimir calificaciones.",
  "exercise43SolutionTitle": "Solución",
  "exercise43SolutionContent": "La solución correcta es:\n```swift\nvar score = 85;\nif score >= 90 #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise43Example": "Ejemplo:\n```swift\nvar score = 85;\nif score >= 90 #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise43Hint": "Escribe tu código aquí",
  "exercise44IntroTitle": "Instrucciones del Ejercicio",
  "exercise44IntroContent": "Crea un programa para comprobar la fortaleza de una contraseña basado en estas condiciones:\n\n1. **Fuerte**: Al menos 8 caracteres, contiene letras y números.\n2. **Débil**: Al menos 6 caracteres, pero no cumple con los criterios de \"Fuerte\".\n3. **Muy Débil**: Menos de 6 caracteres.",
  "exercise44CorrectTitle": "¡Correcto! 🎉",
  "exercise44CorrectContent": "¡Muy bien! Has implementado un verificador de fortaleza de contraseñas.\n\nExplicación:\n- **Contraseña Fuerte:** Al menos 8 caracteres, contiene letras y números.\n- **Contraseña Débil:** Al menos 6 caracteres, pero faltan criterios fuertes.\n- **Contraseña Muy Débil:** Menos de 6 caracteres.",
  "exercise44Hint1Title": "Pista 1",
  "exercise44Hint1Content": "Declara una variable `password`. Ejemplo: `var password = \"abc123\"`.",
  "exercise44Hint2Title": "Pista 2",
  "exercise44Hint2Content": "Usa `.count` para comprobar la longitud y `.contains` para validar el contenido.",
  "exercise44SolutionTitle": "Solución",
  "exercise44SolutionContent": "La solución correcta es:\n```swift\nvar password = \"abc123\";\nif password.count >= 8 && password.contains(\"\\d\") && password.contains(\"\\w\") #\n    print(\"Fuerte\");\nº else if password.count >= 6 #\n    print(\"Débil\");\nº else #\n    print(\"Muy Débil\");\nº\n```",
  "exercise44Example": "Ejemplo:\n```swift\nvar password = \"abc123\";\nif password.count >= 8 && password.contains(\"\\d\") && password.contains(\"\\w\") #\n    print(\"Fuerte\");\nº else if password.count >= 6 #\n    print(\"Débil\");\nº else #\n    print(\"Muy Débil\");\nº\n```",
  "exercise44Hint": "Escribe tu contraseña aquí",
  "exercise45IntroTitle": "Instrucciones del Ejercicio",
  "exercise45IntroContent": "Crea un programa que asigne calificaciones según una puntuación:\n\n1. Si `score >= 90`, calificación `A`.\n2. Si `score >= 80`, calificación `B`.\n3. Si `score >= 70`, calificación `C`.\n4. Si `score >= 60`, calificación `D`.\n5. Si `score < 60`, calificación `F`.",
  "exercise45CorrectTitle": "¡Correcto! 🎉",
  "exercise45CorrectContent": "¡Bien hecho! Has implementado correctamente un sistema de calificaciones con `if-else`.",
  "exercise45Hint1Title": "Pista 1",
  "exercise45Hint1Content": "Declara una variable `score`. Ejemplo: `var score = 85`.",
  "exercise45Hint2Title": "Pista 2",
  "exercise45Hint2Content": "Usa `if` para comprobar si `score >= 90`, y añade `else-if` para otros rangos.",
  "exercise45Hint3Title": "Pista 3",
  "exercise45Hint3Content": "Completa la estructura para todos los rangos de calificación.",
  "exercise45SolutionTitle": "Solución",
  "exercise45SolutionContent": "La solución correcta es:\n\n```swift\nvar score = 85;\nif (score >= 90) #\n    print(\"The grade is A\");\nº else if (score >= 80) #\n    print(\"The grade is B\");\nº else if (score >= 70) #\n    print(\"The grade is C\");\nº else if (score >= 60) #\n    print(\"The grade is D\");\nº else #\n    print(\"The grade is F\");\nº\n```",
  "exercise45Example": "Ejemplo:\n\n```swift\nvar score = 85;\nif (score >= 90) #\n    print(\"The grade is A\");\nº else # ... º\n```",
  "exercise45Hint": "Escribe tu código aquí", 
  "purchaseSuccess": "¡Compra completada con éxito!",
  "purchaseError": "Hubo un error durante la compra. Inténtalo de nuevo.",
  "purchasePending": "Compra pendiente. Por favor, espera...",
  "purchaseException": "Se produjo un problema inesperado. Inténtalo más tarde.", 
  "aboutLearnSwiftTitle": "Acerca de LearnSwift",
  "aboutLearnSwiftContent": "LearnSwift es una aplicación diseñada para ayudar a los usuarios a aprender Swift, el poderoso lenguaje de programación utilizado para crear aplicaciones en las plataformas de Apple. Esta aplicación incluye ejercicios interactivos para construir una base sólida en la programación de Swift.\n\nVersión: Swift 5.9\n\nSi tienes alguna pregunta o comentario, no dudes en ponerte en contacto a través de cualquiera de las siguientes plataformas:"

}