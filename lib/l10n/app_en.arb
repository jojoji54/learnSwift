{
    "close": "Close",
    "correctTitle": "Correct! üéâ",
    "correctContent": "Great! You've successfully declared a variable in Swift.\n\nExplanation:\n1. You used the `var` keyword to create a variable.\n2. The variable name can be any valid identifier, like `greeting`, `message`, or `g`.\n3. The value assigned to the variable must be a valid string enclosed in double quotes (`\"`).",
    "hint1Title": "Hint 1",
    "hint1Content": "Use the `var` keyword to declare variables. For example:\n`var variableName = \"value\"`.",
    "hint2Title": "Hint 2",
    "hint2Content": "Make sure you're using straight quotes (`\"`) and not curly quotes (`‚Äú` or `‚Äù`).",
    "solutionTitle": "Solution",
    "solutionContent": "The correct syntax is:\n\n`var variableName = \"value\"`\n\nExample:\n`var greeting = \"Hello, World!\"`\n`var g = \"Swift\"`",
    "tryAgain": "Try again! ({failedAttempts}/3 attempts)",
    "exerciseInstructionsTitle": "Exercise Instructions",
    "exerciseInstructionsContent": "Welcome to your first exercise in Swift! üéâ\nYour task: Declare a variable named `greeting` and assign it the value \"Hello, World!\".\n\nExample:\nvar greeting = \"Hello, World!\"\n\nTip: Use the `var` keyword to declare a variable.",
    "enterYourCodeHere": "Enter your code here",
    "varKeyword": "var",
    "exercise2InstructionsContent": "Welcome to the second exercise in Swift! üéâ\n\nYour task:\n1. Declare a variable named `number` and assign it the value 5.\n2. Update the value of `number` by adding a number to it.\n\nExample:\nvar number = 5\nnumber = number + 10",
    "exercise2CorrectContent": "Great! You've successfully declared and updated a variable in Swift.\n\nExplanation:\n1. You declared a variable named `number` and assigned it an initial value of 5.\n2. Then, you updated its value by adding a number to it.\n\nThis demonstrates how variables can be both declared and modified in Swift.",
    "exercise2Hint1Content": "Use the `var` keyword to declare a variable. Assign an initial value like `var number = 5`.",
    "exercise2Hint2Content": "After declaring the variable, update its value by adding a number, e.g., `number = number + 10`.",
    "exercise2SolutionContent": "The correct solution is:\n\nvar number = 5;\nnumber = number + 10;",
    "exercise3InstructionsContent": "Welcome to your third exercise in Swift! üéâ\n\nYour task:\n1. Use the `print()` function to display a message in the console.\n2. Try using any message you like inside the parentheses.\n\nHint: Make sure your text is inside double quotes and follows the format `print(\"Your message\")`.",
    "exercise3CorrectContent": "Well done! You've successfully used the `print()` function.\n\nExplanation:\nThe `print()` function allows you to display any message in the console. For example:\n- print(\"Swift is fun!\")\n- print(\"Hello, world!\")\nFeel free to experiment with different messages.",
    "exercise3SolutionContent": "The correct answer is any valid use of the `print()` function. For example:\n\nprint(\"Swift is fun!\")\nprint(\"Learning is awesome!\")",
    "exercise4InstructionsContent": "Welcome to this exercise in Swift! üéâ\n\nYour task: Declare variables and perform an arithmetic operation.\nExample:\nvar a = 5\nvar b = a\nvar sum = a + b\nprint(sum)",
    "exercise4CorrectContent": "Great! You've successfully declared variables and performed arithmetic operations in Swift!\n\nExplanation:\n1. You used the `var` keyword to declare variables.\n2. You assigned values to the variables, including one variable depending on another.\n3. You performed an arithmetic operation (`a + b`) and stored the result in a new variable `sum`.\n4. Finally, you used `print(sum)` to display the result in the console.\n\nUnderstanding how to declare variables and use arithmetic operations is a fundamental step in programming.",
    "exercise4Hint1Content": "Remember to use the `var` keyword to declare variables and assign them values.",
    "exercise4Hint2Content": "Think about assigning a value to one variable using another, like `var b = a`.",
    "exercise4Hint3Content": "Structure your code like this:\n1. Declare two variables.\n2. Add them together.\n3. Print the result.",
    "hint3Title": "Hint 3",
    "exercise5InstructionsContent": "Welcome to this exercise in Swift! üéâ\n\nYour task: Declare a variable and use string interpolation.\nExample:\nvar name = \"John\"\nprint(\"Hello, my name is \\(name)!\")",
    "exercise5CorrectContent": "Well done! You've successfully used string interpolation in Swift!\n\nExplanation:\n1. You declared a variable `name` and assigned it a value.\n2. You used the `print()` function to display a message.\n3. Inside `print()`, you included the variable `name` in the text using string interpolation (`\\(name)`).\n\nString interpolation allows you to combine variables and text dynamically, making your code more powerful and expressive.",
    "exercise5Hint1Content": "Remember to use the `var` keyword to declare a variable and assign it a value (e.g., var name = \"John\").",
    "exercise5Hint2Content": "Use string interpolation to combine a variable and text inside `print()`. For example: print(\"Hello, my name is \\(name)!\").",
    "exercise5Hint3Content": "Structure your code like this:\n1. Declare a variable `name` and assign a value to it.\n2. Use string interpolation to include `name` in a message using `print()`.",
    "exercise6InstructionsContent": "Welcome to this exercise in Swift! üéâ\n\nYour task: Calculate the area of a rectangle.\n1. Declare variables `length` and `width`.\n2. Multiply them to calculate the area.\n3. Use `print()` to display the result.\n\nExample:\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
    "exercise6CorrectContent": "Great job! You've successfully calculated the area of a rectangle.\n\nExplanation:\n1. `var length` and `var width` are used to declare dimensions of the rectangle.\n2. Multiplying them gives the `area`.\n3. `print(area)` displays the result.",
    "exercise6Hint1Content": "Remember to use the `var` keyword to declare variables.",
    "exercise6Hint2Content": "Use `length * width` to calculate the area.",
    "exercise6Hint3Content": "Here's the correct structure:\n1. Declare two variables for `length` and `width`.\n2. Multiply them to calculate `area`.\n3. Print the result.",
    "exercise6SolutionContent": "The correct answer is:\n\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
    "exercise7InstructionsContent": "Your task: Combine two strings using concatenation.\n\nExample:\nvar firstName = \"John\"\nvar lastName = \"Doe\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
    "exercise7CorrectContent": "Well done! You've successfully concatenated strings in Swift.\n\nExplanation:\n1. You declared two `String` variables.\n2. You used the `+` operator to concatenate them.\n3. Finally, you used `print()` to display the combined string.",
    "exercise7Hint1Content": "Use the `+` operator to concatenate strings.",
    "exercise7Hint2Content": "Combine the strings and include a space between them.",
    "exercise7SolutionContent": "The correct answer is:\n\nvar firstName = \"John\"\nvar lastName = \"Doe\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
    "exercise8InstructionsContent": "Your task: Declare variables of different types (`Int`, `Double`, `String`, `Bool`) and print them.\n\nExample:\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)",
    "exercise8CorrectContent": "Great! You've successfully declared variables with different data types in Swift.\n\nExplanation:\n1. `Int` is used for whole numbers.\n2. `Double` is used for decimal numbers.\n3. `String` is used for text.\n4. `Bool` is used for true/false values.\n5. `print()` displays the values of variables.",
    "exercise8Hint1Content": "Make sure you specify the type of each variable. For example: `var age: Int = 25`.",
    "exercise8Hint2Content": "Remember to print all variables using `print(variableName)`.",
    "exercise8SolutionContent": "The correct answer is:\n\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)", 
    "exercise9InstructionsContent": "Your task: Declare constants using `let` and print their values.\n\nExample:\nlet pi = 3.14159\nlet appName = \"Swift Learning\"\nprint(pi)\nprint(appName)",
    "exercise9CorrectContent": "Well done! You successfully declared constants in Swift and used them in your code.\n\nExplanation:\n1. `let` is used to declare constants.\n2. Constants cannot be changed once assigned a value.\n3. You printed the constants correctly to verify their values.",
    "exercise9Hint1Content": "Remember to use the `let` keyword to declare constants.",
    "exercise9Hint2Content": "Ensure that your constants are being printed correctly, like `print(constantName)`.",
    "exercise9SolutionContent": "The correct answer is:\n\nlet pi = 3.14159\nlet appName = \"Swift Learning\"\nprint(pi)\nprint(appName)", 
    "exercise10InstructionsContent": "Your task: Create an array with three integers and print specific elements.\n\nExample:\nvar fruits = [\"Apple\", \"Banana\", \"Cherry\"]\nprint(fruits[0])\nprint(fruits[2])",
    "exercise10CorrectContent": "Great! You have successfully created an array and accessed its elements.\n\nExplanation:\n1. Arrays are collections of ordered values.\n2. You used square brackets `[]` to create the array.\n3. To access elements, you used their index inside square brackets, starting from `0`.",
    "exercise10Hint1Content": "Start by creating an array using square brackets `[]`.",
    "exercise10Hint2Content": "Access elements in the array using their index. Remember, indexes start from 0.",
    "exercise10SolutionContent": "The correct answer is:\n\nvar numbers = [1, 2, 3]\nprint(numbers[0])\nprint(numbers[2])", 
    "exercise11InstructionsContent": "Your task: Create and call a function that prints a message.\n\nExample:\nfunc greet() @\n    print(\"Hello, World!\")\n&\ngreet()",
    "exercise11CorrectContent": "Great! You've successfully created and called a function in Swift.\n\nExplanation:\n1. You declared a function using the `func` keyword.\n2. Inside the function, you used `print()` to display a message.\n3. Finally, you called the function by its name followed by `()`.",
    "exercise11Hint1Content": "Start by declaring a function using the `func` keyword.",
    "exercise11Hint2Content": "Inside the function, use `print()` to display a message.",
    "exercise11SolutionContent": "The correct answer is:\n\nfunc greet() @\n    print(\"Hello, World!\")\n&\ngreet()", 
    "exercise12InstructionsContent": "Your task: Perform basic arithmetic operations.\n\nExample:\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)",
    "exercise12CorrectContent": "Great! You've successfully performed arithmetic operations in Swift.\n\nExplanation:\n1. Declared variables for numbers.\n2. Performed addition, subtraction, multiplication, and division.\n3. Printed the results to the console.",
    "exercise12Hint1Content": "Start by declaring two variables using the `var` keyword.",
    "exercise12Hint2Content": "Use `+`, `-`, `*`, and `/` for arithmetic operations.",
    "exercise12SolutionContent": "The correct answer is:\n\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)", 
    "exercise13InstructionsContent": "Your task: Declare constants and print their values.\n\nExample:\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)",
    "exercise13CorrectContent": "Great! You've successfully declared constants in Swift.\n\nExplanation:\n1. Declared constants using `let`.\n2. Assigned values of different data types (numbers, strings, booleans).\n3. Printed their values to the console.",
    "exercise13Hint1Content": "Start by using the `let` keyword to declare constants.",
    "exercise13Hint2Content": "Assign values of different types (e.g., a number, a string, a boolean) to the constants.",
    "exercise13SolutionContent": "The correct answer is:\n\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)", 
    "exercise14InstructionsContent": "Combine concepts: create a constant for pi, write a function to calculate circle areas, use an array of radii, and print results.",
    "exercise14CorrectContent": "Great! You've successfully combined multiple Swift concepts.\n\nExplanation:\n1. Declared a constant for the value of pi.\n2. Created a function to calculate the area of a circle.\n3. Used an array to store radii.\n4. Stored the calculated areas in a new array and printed the results.",
    "exercise14Hint1Content": "Declare a constant for the value of pi using `let`.",
    "exercise14Hint2Content": "Write a function that calculates the area of a circle using a radius.",
    "exercise14SolutionContent": "The correct answer is:\n\nlet pi = 3.14159\nfunc calculateCircleArea(radius: Double) -> Double @\n    return pi * radius * radius\n&\nlet radii = [3.0, 4.5, 6.7]\nvar areas = [Double]()\nfor radius in radii @\n    areas.append(calculateCircleArea(radius: radius))\n&\nprint(areas)", 
    "exercise15InstructionsContent": "Write two functions for temperature conversion: Celsius to Fahrenheit and Fahrenheit to Celsius. Use constants for temperatures and print the results.",
    "exercise15CorrectContent": "Fantastic! You've successfully created a temperature converter.\n\nExplanation:\n1. Defined functions for converting Celsius to Fahrenheit and vice versa.\n2. Declared constants for initial temperatures.\n3. Printed the results of the conversions.",
    "exercise15Hint1Content": "Define a function for Celsius to Fahrenheit using the formula `(Celsius * 9 / 5) + 32`.",
    "exercise15Hint2Content": "Define a function for Fahrenheit to Celsius using the formula `(Fahrenheit - 32) * 5 / 9`.",
    "exercise15SolutionContent": "The correct answer is:\n\nfunc convertToFahrenheit(celsius: Double) -> Double @\n    return (celsius * 9 / 5) + 32\n&\nfunc convertToCelsius(fahrenheit: Double) -> Double @\n    return (fahrenheit - 32) * 5 / 9\n&\nlet tempInCelsius = 25.0\nlet tempInFahrenheit = 77.0\nprint(convertToFahrenheit(celsius: tempInCelsius))\nprint(convertToCelsius(fahrenheit: tempInFahrenheit))", 
    "exercise3Hint1Content": "Remember to use the `print()` function to display a message in the console.\n\nFor example:\n```swift\nprint(\"Hello, World!\")\n```", 
    "exercise3Hint2Content": "Make sure your message is enclosed in double quotes.\n\nExample:\n```swift\nprint(\"Swift is fun!\")\n```", 
    "unlockExerciseTitle": "Unlock Exercise?",
    "unlockExerciseContent": "Do you want to unlock the exercise \"{exerciseName}\"? You can do so in the following ways:",
    "cancel": "Cancel",
    "buyExercise": "Buy this exercise",
    "buyAllExercises": "Unlock all exercises",
    "restorePurchases": "Restore purchases",
    "@unlockExerciseContent": {
      "description": "Message displayed when asking the user if they want to unlock a specific exercise",
      "placeholders": {
        "exerciseName": {
          "type": "String",
          "example": "Hello World"
        }
      }
    }, 
    "purchaseUnavailable": "Purchases are not available at the moment.",
  "purchaseInitiated": "The purchase has been initiated.",
  "productNotFound": "Product not found.", 
  "restoreSuccess": "Purchases restored successfully!",
  "restoreError": "An error occurred during the restoration.",
  "noPurchasesToRestore": "No purchases to restore.",
  "unexpectedRestoreError": "Unexpected error during restoration.", 
  "exercise151InstructionsContent": "Welcome to Boolean Basics! üéâ\n\nYour task:\n1. Declare a variable of type boolean using the `var` keyword.\n2. Assign it the value `true` or `false`.\n\nExample:\n```swift\nvar isSwiftFun = true\n```",
  "exercise151SolutionContent": "The correct solution is:\n\n```swift\nvar isSwiftFun = true\n```",
  "exercise15Hint1Title": "Hint 1",
  "exercise151Hint1Content": "Use the `var` keyword to declare a variable. Assign it a boolean value like `true` or `false`.",
  "exercise151Hint2Title": "Hint 2",
  "exercise151Hint2Content": "A correct example is:\n```swift\nvar isSwiftFun = true\n```", 
  "booleanExplanation": "Great! You've successfully combined boolean variables using logical operators.\n\nExplanation:\n- The `&&` operator checks if both conditions are true.\n- The `||` operator checks if at least one condition is true.\n\nBy using these operators, you can make decisions based on multiple conditions.",
  "hint1Boolean": "Start by declaring two boolean variables: `var isSunny = true` and `var isWeekend = false`.",
  "hint2Boolean": "Use the `&&` operator to check if both conditions are true. For example: `var goToBeach = isSunny && isWeekend`.",
  "exerciseInstructionsBoolean": "Welcome to Boolean Operations! üéâ\n\nYour task:\n1. Declare two boolean variables: `isSunny` and `isWeekend`.\n2. Combine them using `&&` or `||` and assign the result to `goToBeach`.\n3. Print the result.", 
   "exercise16SolutionContent": "The correct solution is:\n\n```swift\nvar isSunny = true;\nvar isWeekend = false;\nvar goToBeach = isSunny && isWeekend;\nprint(goToBeach);\n```",
  "example": "Example", 
  "booleanComparisonExplanation": "Great! You've successfully used boolean comparisons in Swift.\n\nExplanation:\n- `!isHot` checks if `isHot` is `false`.\n- `!isCold` checks if `isCold` is `false`.\n- Combining these conditions using `&&` determines if the environment is comfortable.\n\nThis exercise demonstrates how to use logical operators with comparisons to evaluate complex conditions.",
  "hint1BooleanComparison": "Declare two boolean variables: `isHot` and `isCold`. Assign them values like `true` or `false`.",
  "hint2BooleanComparison": "Use the `!` operator to invert a boolean value, e.g., `!isHot` checks if `isHot` is `false`.",
  "exerciseInstructionsBooleanComparison": "Welcome to Boolean Comparisons! üéâ\n\nYour task:\n1. Declare two boolean variables: `isHot` and `isCold`.\n2. Combine them using the `!` operator and the `&&` operator to determine if `isComfortable` is `true`.\n3. Print the result.",
  "exercise17SolutionContent": "The correct solution is:\n\n```swift\nvar isHot = false;\nvar isCold = false;\nvar isComfortable = !isHot && !isCold;\nprint(isComfortable);\n```", 
  "booleanWalkingExplanation": "Great! You've successfully used logical operators to combine boolean values in Swift.\n\nExplanation:\n- `isSunny` checks if it is sunny.\n- `hasUmbrella` checks if you have an umbrella.\n- `canGoWalking` combines these two values using the `||` operator to decide if you can go walking.\n\nExample:\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking) // true\n```",
  "hint1BooleanWalking": "Use the `var` keyword to declare the variables. Assign boolean values like `true` or `false`.",
  "hint2BooleanWalking": "Combine the boolean values using the `||` operator. For example:\n```swift\nvar canGoWalking = isSunny || hasUmbrella\n```",
  "exerciseInstructionsBooleanWalking": "Welcome to Boolean Operations! üéâ\n\nYour task:\n1. Declare two boolean variables: `isSunny` and `hasUmbrella`.\n2. Combine them using the `||` operator to decide if you can go walking.\n\nExample:\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```",
  "exercise18SolutionContent": "The correct solution is:\n\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```", 
  "logicalOperatorsExplanation": "Great! You've successfully used logical operators to decide if you can go outside.\n\nExplanation:\n- `isRaining` checks if it is raining.\n- `haveUmbrella` checks if you have an umbrella.\n- `canGoOutside` combines these two values using the `||` operator to determine if you can go outside.\n\nExample:\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\nprint(canGoOutside)\n```",
  "hint1LogicalOperators": "Declare two variables: `isRaining` and `haveUmbrella`. Assign them boolean values like `true` or `false`.",
  "hint2LogicalOperators": "Combine the variables using the logical operators `&&` and `||`.",
  "exerciseInstructionsLogicalOperators": "Welcome to the Logical Operators Exercise! üéâ\n\nYour task:\n1. Declare two boolean variables: `isRaining` and `haveUmbrella`.\n2. Use the `||` operator to decide if you can go outside.\n\nExample:\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\n```",
  "exercise19SolutionContent": "The correct solution is:\n\n```swift\nvar isRaining = true;\nvar haveUmbrella = true;\nvar canGoOutside = !isRaining || haveUmbrella;\nprint(canGoOutside);\n```", 
  "logicalOrExplanation": "Great! You've successfully used the logical OR operator in Swift.\n\nExplanation:\n- The `||` operator returns `true` if **either** of the conditions is true.\n- Example: `let isSunny = true || false` evaluates to `true` because one of the conditions is true.",
  "hint1LogicalOr": "Use the `||` operator to check if **either** of two conditions is true.",
  "hint2LogicalOr": "An example syntax is:\n```swift\nlet isSunny = true || false\n```",
  "exerciseInstructionsLogicalOr": "Welcome to Logical OR Operator Basics! üéâ\n\nYour task:\n1. Use the `let` keyword to declare a constant.\n2. Assign it a value that uses the logical OR operator (`||`).\n\nExample:\n```swift\nlet isSunny = true || false\n```",
  "exercise20SolutionContent": "The correct solution is:\n\n```swift\nlet isSunny = true || false\n```", 
  "booleanNegationExplanation": "Great! You've successfully used the boolean negation operator in Swift.\n\nExplanation:\n- The `!` operator negates a boolean value. For example, if `isSwiftFun` is `true`, `!isSwiftFun` becomes `false`.",
  "hint1BooleanNegation": "Use the `var` keyword to declare two variables. Assign one a boolean value and negate it for the other.",
  "hint2BooleanNegation": "A correct example is:\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exerciseInstructionsBooleanNegation": "Welcome to Boolean Negation! üéâ\n\nYour task:\n1. Declare a boolean variable using the `var` keyword.\n2. Declare another variable and assign it the negated value of the first variable.\n\nExample:\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exercise21SolutionContent": "The correct solution is:\n\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```", 
  "booleanShortCircuitExplanation": "Great! You've successfully worked with boolean short-circuit evaluation in Swift.\n\nExplanation:\n- The `||` operator evaluates to `true` if either condition is true, without evaluating the second condition if the first is true.\n- The `&&` operator evaluates to `true` only if both conditions are true.",
  "hint1BooleanShortCircuit": "Try using the `||` operator for 'OR' and `&&` for 'AND'.",
  "hint2BooleanShortCircuit": "Remember, `||` evaluates the first condition first, while `&&` requires both conditions to be true.",
  "exerciseInstructionsBooleanShortCircuit": "Welcome to Boolean Short-Circuit Evaluation! üéâ\n\nYour task:\n1. Declare a variable using the `var` keyword.\n2. Use `||` (OR) and `&&` (AND) operators to create a boolean expression.\n\nExample:\n```swift\nvar result = (true || false) && true\n```",
  "exercise22SolutionContent": "The correct solution is:\n\n```swift\nvar result = (true || false) && true\n```", 
  "ternaryOperatorExplanation": "Great! You've successfully used the conditional ternary operator in Swift.\n\nExplanation:\n- The ternary operator `? :` allows you to choose between two values based on a condition.\n- Example:\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```\nHere, `message` will hold the value `Swift is great!` because the condition is `true`.",
  "hint1TernaryOperator": "Use the ternary operator `? :` to choose between two values based on a condition.",
  "hint2TernaryOperator": "A correct example is:\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```",
  "exerciseInstructionsTernaryOperator": "Welcome to the Conditional Ternary Operator! üéâ\n\nYour task:\n1. Declare a variable using the `var` keyword.\n2. Use the ternary operator `? :` to assign it a value based on a boolean condition.\n\nExample:\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```",
  "exercise23SolutionContent": "The correct solution is:\n\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```", 
  "ifElseExplanation": "Great! You've successfully used a boolean in an `if-else` statement.\n\nExplanation:\n- Boolean variables can be used in conditional statements to control program flow.\n- Example:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```",
  "hint1IfElse": "Declare a boolean variable using `var`. Use it in an `if-else` statement to control what gets printed.",
  "hint2IfElse": "A correct example is:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```",
  "exerciseInstructionsIfElse": "Welcome to Boolean in If-Else Statements! üéâ\n\nYour task:\n1. Declare a boolean variable using the `var` keyword.\n2. Use an `if-else` statement to print one of two messages depending on the boolean's value.\n\nExample:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```",
  "exercise24SolutionContent": "The correct solution is:\n\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```", 
  "nestedIfExplanation": "Great! You've successfully used nested `if` statements with booleans.\n\nExplanation:\n- This exercise demonstrates how to use nested `if` statements to handle multiple conditions.\n- Example:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```",
  "hint1NestedIf": "Use the `var` keyword to declare two boolean variables. Use nested `if` statements to check each condition.",
  "hint2NestedIf": "A correct example is:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```",
  "exerciseInstructionsNestedIf": "Welcome to Nested If Statements with Booleans! üéâ\n\nYour task:\n1. Declare two boolean variables using the `var` keyword.\n2. Use nested `if` statements to check both conditions.\n\nExample:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```",
  "exercise25SolutionContent": "The correct solution is:\n\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```", 
    "passwordValidatorExplanation": "Great! You've successfully created a password validator using booleans.\n\nExplanation:\n- This exercise combines string operations and boolean logic.\n- A strong password must:\n  1. Be at least 8 characters long.\n  2. Contain an `@` symbol.\n  3. Contain a `$` symbol.\n\nExample solution:\n```swift\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"Strong password!\");\n> else <\n  print(\"Weak password.\");\n>```",
    "hint1PasswordValidator": "Start by declaring a variable named `password` with a string value. Use `.contains` to check for `@` and `$` symbols.",
    "hint2PasswordValidator": "Combine conditions with the `&&` operator:\nUse `if password.contains(\"@\") && password.contains(\"$\")`.",
    "passwordValidatorInstructions": "Welcome to the Password Validator Challenge! üéâ\n\nYour task:\n1. Declare a variable named `password` and assign it a string value.\n2. Use `if` statements to check if the password contains:\n   - At least 8 characters.\n   - An `@` symbol.\n   - A `$` symbol.\n3. If the password meets all criteria, print `Strong password!`. Otherwise, print `Weak password.`.",
    "exercise26SolutionContent": "The correct solution is:\n\n```swift\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"Strong password!\");\n> else <\n  print(\"Weak password.\");\n>```", 
    "gameLogicExplanation": "Great! You've successfully implemented a game logic using booleans and conditions.\n\nExplanation:\n- You declared variables `isAlive` and `health`.\n- Used a constant `damage` to subtract health.\n- Checked if health was below or equal to 0 to determine if the game is over.",
    "hint1GameLogic": "Declare variables `isAlive`, `health`, and a constant `damage`. Use `if` to check health.",
    "hint2GameLogic": "Remember to use:\n- `health -= damage` to subtract health.\n- `if (health <= 0)` to check game over conditions.",
    "gameLogicInstructions": "Welcome to the Boolean Game Logic Challenge! üéÆ\n\nYour task:\n1. Declare `isAlive` as `true`.\n2. Declare `health` as `100`.\n3. Subtract `damage` from `health`.\n4. Print `Game Over` if health <= 0. Otherwise, print `Keep Playing!`.\n\nExample:\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\n¬™ else #\n  print(\"Keep Playing!\");\n¬™",
    "exercise27SolutionContent": "The correct solution is:\n\n```swift\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\n¬™ else #\n  print(\"Keep Playing!\");\n¬™\n```", 
    "quizLogicExplanation": "Great! You've successfully implemented a quiz logic using booleans and conditions.\n\nExplanation:\n- `isAnswerCorrect` is a boolean constant that stores the user's response.\n- An `if` condition checks its value and displays the appropriate message.",
    "hint1QuizLogic": "Use a boolean constant named `isAnswerCorrect`. Write an `if` condition to check its value.",
    "hint2QuizLogic": "A correct example is:\n```swift\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"Correct Answer! üéâ\");\n¬∫ else #\n  print(\"Try Again!\");\n¬∫\n```",
    "quizLogicInstructions": "Welcome to the Boolean Quiz App Logic Challenge! üß†\n\nYour task:\n1. Declare `isAnswerCorrect` as a constant boolean.\n2. Write an `if-else` structure to check if the answer is correct.\n3. If correct, print `Correct Answer! üéâ`. Otherwise, print `Try Again!`.",
    "exercise28SolutionContent": "The correct solution is:\n\n```swift\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"Correct Answer! üéâ\");\n¬∫ else #\n  print(\"Try Again!\");\n¬∫\n```", 
    "booleanGuessExplanation": "Amazing! You've implemented a guessing game using booleans.\n\nExplanation:\n- `secretBoolean` holds a hidden value.\n- The user compares their guess to this value using the `==` operator.\n- Based on the comparison, you display the appropriate message.",
    "hint1BooleanGuess": "Use a constant `secretBoolean` with a boolean value. Declare another constant `userGuess` and compare both using `==`.",
    "hint2BooleanGuess": "A correct example is:\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"You guessed it! üéâ\");\n¬∫ else #\n  print(\"Wrong guess! Try again.\");\n¬∫\n```",
    "booleanGuessInstructions": "Welcome to the Boolean Guessing Challenge! üß†\n\nYour task:\n1. Declare a constant `secretBoolean` with a boolean value.\n2. Declare a constant `userGuess` representing the user's input.\n3. Compare both using the `==` operator.\n4. If the guess is correct, print `You guessed it! üéâ`. Otherwise, print `Wrong guess! Try again.`",
    "exercise29SolutionContent": "The correct solution is:\n\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"You guessed it! üéâ\");\n¬∫ else #\n  print(\"Wrong guess! Try again.\");\n¬∫\n```", 
    "booleanLogicExplanation": "Amazing! You've successfully used logical operators to evaluate conditions.\n\nExplanation:\n- `isUserLoggedIn` and `hasPremiumAccess` are boolean constants.\n- You used the `&&` (AND) operator to check if both are true.\n- Based on the evaluation, you printed the corresponding message.",
    "hint1BooleanLogic": "Use two constants `isUserLoggedIn` and `hasPremiumAccess` with boolean values.\nCheck both conditions using the `&&` operator.",
    "hint2BooleanLogic": "A correct example is:\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"Access granted to premium feature!\");\n¬∫ else #\n  print(\"Access denied. Please log in or upgrade.\");\n¬∫\n```",
    "booleanLogicInstructions": "Welcome to the Logical Operators Game! üß†\n\nYour task:\n1. Declare two constants: `isUserLoggedIn` and `hasPremiumAccess`.\n2. Use the `&&` operator to check if both conditions are true.\n3. If true, print `Access granted to premium feature!`.\n4. Otherwise, print `Access denied. Please log in or upgrade.`",
    "exercise30SolutionContent": "The correct solution is:\n\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"Access granted to premium feature!\");\n¬∫ else #\n  print(\"Access denied. Please log in or upgrade.\");\n¬∫\n```", 
    "exercise31IntroTitle": "Exercise Instructions",
    "exercise31IntroContent": "Welcome to If-Else Basics! üéâ\n\nYour task:\n1. Declare a variable `score` and assign it a value.\n2. Use an `if` block to check a condition (e.g., if the score is greater than 70).\n3. Print `Passed` if the condition is true; otherwise, print `Failed`.",
    "exercise31CorrectTitle": "Correct! üéâ",
    "exercise31CorrectContent": "Great! You've successfully used an if-else statement in Swift.\n\nExplanation:\n- The `if` block runs when the condition is true.\n- The `else` block runs when the condition is false.\n\nThis allows you to make decisions based on conditions in your code.",
    "exercise31Hint1Title": "Hint 1",
    "exercise31Hint1Content": "Start by declaring a variable, e.g., `var score = 80`. Use an `if` block to check the value.",
    "exercise31Hint2Title": "Hint 2",
    "exercise31Hint2Content": "An example structure could be:\n```swift\nif (score > 70) #\n  print(\"Passed\");\n¬∫ else #\n  print(\"Failed\");\n¬∫```",
    "exercise31SolutionTitle": "Solution",
    "exercise31SolutionContent": "The correct solution is:\n```swift\nvar score = 80;\nif (score > 70) #\n  print(\"Passed\");\n¬∫ else #\n  print(\"Failed\");\n¬∫```",
    "exercise31Example": "Example:\n1  var score = 80;\n2  if (score > 70) #\n3      print(\"Passed\");\n4  ¬∫ else #\n5      print(\"Failed\");\n6  ¬∫",
    "exercise31Hint": "Enter your code here", 
    "exercise32IntroTitle": "Exercise Instructions",
    "exercise32IntroContent": "Welcome to If-Else with Multiple Conditions! üéâ\n\nYour task:\n1. Declare a variable `temperature` and assign it a value.\n2. Use `if` to check if it's greater than or equal to 30 and print 'It's hot'.\n3. Use `else if` to check if it's less than 15 and print 'It's cold'.\n4. Use `else` to handle all other cases and print 'It's warm'.",
    "exercise32CorrectTitle": "Correct! üéâ",
    "exercise32CorrectContent": "Great! You've successfully used if-else with multiple conditions in Swift.\n\nExplanation:\n- `if` is used for the first condition.\n- `else if` allows for additional checks.\n- `else` handles all other cases.\n\nThis structure is useful for checking multiple possibilities.",
    "exercise32Hint1Title": "Hint 1",
    "exercise32Hint1Content": "Start by declaring a variable, e.g., `var temperature = 25`. Use `if` to check its value.",
    "exercise32Hint2Title": "Hint 2",
    "exercise32Hint2Content": "An example structure could be:\n```swift\nif (temperature >= 30) #\n  print(\"it is hot\");\n¬∫ else if (temperature < 15) #\n  print(\"it is cold\");\n¬∫ else #\n  print(\"it is warm\");\n¬∫```",
    "exercise32SolutionTitle": "Solution",
    "exercise32SolutionContent": "The correct solution is:\n```swift\nvar temperature = 25;\nif (temperature >= 30) #\n  print(\"it is hot\");\n¬∫ else if (temperature < 15) #\n  print(\"it is cold\");\n¬∫ else #\n  print(\"it is warm\");\n¬∫```",
    "exercise32Example": "Example:\n1  var temperature = 25;\n2  if (temperature >= 30) #\n3      print(\"it is hot\");\n4  ¬∫ else if (temperature < 15) #\n5      print(\"it is cold\");\n6  ¬∫ else #\n7      print(\"it is warm\");\n8  ¬∫",
    "exercise32Hint": "Enter your code here", 
    "exercise33IntroTitle": "Exercise Instructions",
    "exercise33IntroContent": "Welcome to If-Else with Equality Checks! üéâ\n\nYour task:\n1. Declare a variable `password` and assign it the value \"swift\".\n2. Use an `if` statement to check if `password` equals \"swift\".\n3. Print \"Access granted\" if true, or \"Access denied\" otherwise.",
    "exercise33CorrectTitle": "Correct! üéâ",
    "exercise33CorrectContent": "Great! You've successfully used if-else with equality checks in Swift.\n\nExplanation:\n- Use `==` to compare if two values are equal.\n- If they are equal, the `if` block executes.\n- Otherwise, the `else` block executes.\n\nThis is essential for decision-making in programs.",
    "exercise33Hint1Title": "Hint 1",
    "exercise33Hint1Content": "Start by declaring a variable, e.g., `var password = \"swift\"`. Then use an `if` statement to check if it equals \"swift\".",
    "exercise33Hint2Title": "Hint 2",
    "exercise33Hint2Content": "Structure your code like this:\n```swift\nif (password == \"swift\") #\n  print(\"Access granted\");\n¬∫ else #\n  print(\"Access denied\");\n¬∫```",
    "exercise33SolutionTitle": "Solution",
    "exercise33SolutionContent": "The correct solution is:\n```swift\nvar password = \"swift\";\nif (password == \"swift\") #\n  print(\"Access granted\");\n¬∫ else #\n  print(\"Access denied\");\n¬∫```",
    "exercise33Example": "Example:\n1  var password = \"swift\";\n2  if (password == \"swift\") #\n3      print(\"Access granted\");\n4  ¬∫ else #\n5      print(\"Access denied\");\n6  ¬∫",
    "exercise33Hint": "Enter your code here", 
    "exercise34IntroTitle": "Exercise Instructions",
    "exercise34IntroContent": "Welcome to If-Else with Comparison Operators! üéâ\n\nYour task:\n1. Declare a variable `age` and assign it a number.\n2. Use an `if` statement to check if `age >= 18`.\n3. Print \"You are an adult\" if true, or \"You are underage\" otherwise.",
    "exercise34CorrectTitle": "Correct! üéâ",
    "exercise34CorrectContent": "Great! You've successfully used `if-else` with comparison operators.\n\nExplanation:\n- The `>=` operator checks if a value is greater than or equal to another.\n- This is useful for decision-making based on numeric comparisons.",
    "exercise34Hint1Title": "Hint 1",
    "exercise34Hint1Content": "Declare a variable `age` and assign it a number, e.g., `var age = 16`. Then use an `if` statement to check if `age >= 18`.",
    "exercise34Hint2Title": "Hint 2",
    "exercise34Hint2Content": "Structure your code like this:\n```swift\nif (age >= 18) #\n  print(\"You are an adult\");\n¬∫ else #\n  print(\"You are underage\");\n¬∫```",
    "exercise34SolutionTitle": "Solution",
    "exercise34SolutionContent": "The correct solution is:\n```swift\nvar age = 16;\nif (age >= 18) #\n  print(\"You are an adult\");\n¬∫ else #\n  print(\"You are underage\");\n¬∫```",
    "exercise34Example": "Example:\n1  var age = 16;\n2  if (age >= 18) #\n3      print(\"You are an adult\");\n4  ¬∫ else #\n5      print(\"You are underage\");\n6  ¬∫",
    "exercise34Hint": "Enter your code here", 
    "exercise35IntroTitle": "Exercise Instructions",
    "exercise35IntroContent": "Welcome to Nested If-Else Basics! üéâ\n\nYour task:\n1. Declare a variable `score` and assign it a number.\n2. Use `if-else` statements to determine:\n   - `Excellent` for scores 90 and above.\n   - `Pass` for scores 60 to 89.\n   - `Fail` for scores below 60.\n3. Print the corresponding grade.",
    "exercise35CorrectTitle": "Correct! üéâ",
    "exercise35CorrectContent": "Great! You've successfully used nested `if-else` statements.\n\nExplanation:\n- Nested `if-else` allows checking multiple conditions in sequence.\n- In this exercise, the program evaluates a score and determines the grade category.",
    "exercise35Hint1Title": "Hint 1",
    "exercise35Hint1Content": "Start by declaring a variable `score` and assign it a value, e.g., `var score = 75`.",
    "exercise35Hint2Title": "Hint 2",
    "exercise35Hint2Content": "Use nested `if-else` to check the score:\n```swift\nif (score >= 90) #\n  print(\"Excellent\");\n¬∫ else #\n  if (score >= 60) #\n    print(\"Pass\");\n  ¬∫ else #\n    print(\"Fail\");\n  ¬∫\n¬∫```",
    "exercise35SolutionTitle": "Solution",
    "exercise35SolutionContent": "The correct solution is:\n```swift\nvar score = 75;\nif (score >= 90) #\n  print(\"Excellent\");\n¬∫ else #\n  if (score >= 60) #\n    print(\"Pass\");\n  ¬∫ else #\n    print(\"Fail\");\n  ¬∫\n¬∫```",
    "exercise35Example": "Example:\n1  var score = 75;\n2  if (score >= 90) #\n3      print(\"Excellent\");\n4  ¬∫ else #\n5      if (score >= 60) #\n6          print(\"Pass\");\n7      ¬∫ else #\n8          print(\"Fail\");\n9      ¬∫\n10  ¬∫",
     "exercise35Hint": "Enter your code here", 
     "exercise36IntroTitle": "Exercise Instructions",
     "exercise36IntroContent": "Welcome to If-Else with Strings! üéâ\n\nYour task:\n1. Declare a variable named `fruit` and assign it a string value.\n2. Use `if` to check if the string matches a specific value, and print the result.\n3. Use `else` to handle other cases.\n\nExample:\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"It's an apple!\");\n¬∫ else #\n    print(\"It's not an apple!\");\n¬∫```",
     "exercise36CorrectTitle": "Correct! üéâ",
     "exercise36CorrectContent": "Great! You've successfully used `if-else` to evaluate string conditions.\n\nExplanation:\n- Strings can be compared using the `==` operator.\n- Use `if` to check if a string matches a specific value.",
     "exercise36Hint1Title": "Hint 1",
     "exercise36Hint1Content": "Start by declaring a variable `fruit` and assigning it a string value, e.g., `var fruit = \"apple\"`.",
     "exercise36Hint2Title": "Hint 2",
     "exercise36Hint2Content": "Use `if-else` to check if the value matches a condition:\n- If `fruit == \"apple\"`, print \"It's an apple!\".",
     "exercise36SolutionTitle": "Solution",
     "exercise36SolutionContent": "The correct solution is:\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"It's an apple!\");\n¬∫ else #\n    print(\"It's not an apple!\");\n¬∫```",
     "exercise36Example": "Example:\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"It's an apple!\");\n¬∫ else #\n    print(\"It's not an apple!\");\n¬∫```",
     "exercise36Hint": "Enter your code here", 

  "exercise37IntroTitle": "Exercise Instructions",
  "exercise37IntroContent": "Welcome to Numerical Comparisons! üéâ\n\nYour task:\n1. Declare a variable named `temperature` and assign it a numerical value.\n2. Use `if` to check if the value is greater, less than, or equal to a specific number.\n3. Use `else` to handle other cases.\n\nExample:\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"It's warm!\");\n¬∫ else #\n    print(\"It's cold!\");\n¬∫```",
  "exercise37CorrectTitle": "Correct! üéâ",
  "exercise37CorrectContent": "Great! You've successfully used `if-else` to compare numerical values.\n\nExplanation:\n- Use comparison operators like `>`, `<`, `>=`, and `<=` to evaluate numbers.\n- The code inside `if` executes if the condition is true; otherwise, the `else` block runs.",
  "exercise37Hint1Title": "Hint 1",
  "exercise37Hint1Content": "Start by declaring a variable `temperature` and assigning it a number, e.g., `var temperature = 25`.",
  "exercise37Hint2Title": "Hint 2",
  "exercise37Hint2Content": "Use `if` to compare `temperature` to another number, e.g., `if (temperature > 20) # ... ¬∫`.",
  "exercise37SolutionTitle": "Solution",
  "exercise37SolutionContent": "The correct solution is:\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"It's warm!\");\n¬∫ else #\n    print(\"It's cold!\");\n¬∫```",
  "exercise37Example": "Example:\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"It's warm!\");\n¬∫ else #\n    print(\"It's cold!\");\n¬∫```",
  "exercise37Hint": "Enter your code here", 
  "exercise38IntroTitle": "Exercise Instructions",
  "exercise38IntroContent": "Welcome to Nested If-Else Statements! üéâ\n\nYour task:\n1. Declare a variable named `number` and assign it an integer value.\n2. Use an `if-else` structure to categorize the number as positive, negative, or zero.\n\nExample:\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"Positive\");\n¬∫ else if (number < 0) #\n  print(\"Negative\");\n¬∫ else #\n  print(\"Zero\");\n¬∫```",
  "exercise38CorrectTitle": "Correct! üéâ",
  "exercise38CorrectContent": "Great! You've successfully implemented a nested `if-else` structure to handle multiple conditions.\n\nExplanation:\n- If the number is greater than 0, it's a positive number.\n- If the number is less than 0, it's a negative number.\n- Otherwise, the number is zero.\n\nThis is a simple way to categorize numbers based on their values.",
  "exercise38Hint1Title": "Hint 1",
  "exercise38Hint1Content": "Start by declaring a variable `number` and assigning it a value.\nUse `if (number > 0)` to check if the number is positive.",
  "exercise38Hint2Title": "Hint 2",
  "exercise38Hint2Content": "Add an `else if (number < 0)` condition to check if the number is negative.",
  "exercise38SolutionTitle": "Solution",
  "exercise38SolutionContent": "The correct solution is:\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"Positive\");\n¬∫ else if (number < 0) #\n  print(\"Negative\");\n¬∫ else #\n  print(\"Zero\");\n¬∫```",
  "exercise38Example": "Example:\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"Positive\");\n¬∫ else if (number < 0) #\n  print(\"Negative\");\n¬∫ else #\n  print(\"Zero\");\n¬∫```",
  "exercise38Hint": "Enter your code here", 
  "exercise39IntroTitle": "Exercise Instructions",
  "exercise39IntroContent": "Welcome to Nested If-Else Challenge! üéâ\n\nYour task is to determine the type of bonus an employee receives:\n\n1. Declare variables `yearsOfService` (integer) and `performanceRating` (integer).\n2. Use a nested `if-else` structure:\n   - `High Bonus`: `yearsOfService >= 10` and `performanceRating >= 8`.\n   - `Moderate Bonus`: `yearsOfService >= 10` but `performanceRating < 8`.\n   - `Minimal Bonus`: `yearsOfService < 10`.\n3. Print the type of bonus.",
  "exercise39CorrectTitle": "Correct! üéâ",
  "exercise39CorrectContent": "Great job! You've implemented a nested `if-else` logic to determine employee bonuses.\n\n**Explanation:**\n- Employees with `yearsOfService >= 10` and `performanceRating >= 8` receive a `High Bonus`.\n- Employees with `yearsOfService >= 10` but `performanceRating < 8` receive a `Moderate Bonus`.\n- Employees with `yearsOfService < 10` receive a `Minimal Bonus`.\n\nThis exercise helps you understand nested conditions and decision-making in Swift.",
  "exercise39Hint1Title": "Hint 1",
  "exercise39Hint1Content": "Start by declaring variables: `yearsOfService` and `performanceRating` as integers.",
  "exercise39Hint2Title": "Hint 2",
  "exercise39Hint2Content": "Use a nested `if-else` structure. Evaluate `yearsOfService` first, then `performanceRating`.",
  "exercise39SolutionTitle": "Solution",
  "exercise39SolutionContent": "The correct solution is:\n```swift\nvar yearsOfService = 12;\nvar performanceRating = 9;\nif yearsOfService >= 10 #\n    if performanceRating >= 8 #\n        print(\"High Bonus\");\n    ¬∫ else #\n        print(\"Moderate Bonus\");\n    ¬∫\n¬∫ else #\n    print(\"Minimal Bonus\");\n¬∫",
  "exercise39Example": "Example:\n```swift\nvar yearsOfService = 12;\nvar performanceRating = 9;\nif yearsOfService >= 10 #\n    if performanceRating >= 8 #\n        print(\"High Bonus\");\n    ¬∫ else #\n        print(\"Moderate Bonus\");\n    ¬∫\n¬∫ else #\n    print(\"Minimal Bonus\");\n¬∫",
  "exercise39Hint": "Enter your code here", 
  "exercise40IntroTitle": "Exercise Instructions",
  "exercise40IntroContent": "Your task is to implement a grading system:\n\n1. Declare variables `score` (integer) and `participation` (boolean).\n2. Use `if-else` conditions:\n   - `A` for `score >= 90` and `participation == true`.\n   - `B` for `score >= 80`.\n   - `C` for `score >= 70`.\n   - `D` for `score >= 60`.\n   - `F` otherwise.\n3. Print the grade.",
  "exercise40CorrectTitle": "Correct! üéâ",
  "exercise40CorrectContent": "Well done! You've implemented a grading system with multiple conditions.\n\n**Explanation:**\n- `A` is assigned for `score >= 90` and `participation == true`.\n- Other scores are evaluated sequentially in descending order.\n\nThis approach helps to make decisions with multiple criteria.",
  "exercise40Hint1Title": "Hint 1",
  "exercise40Hint1Content": "Start by declaring variables: `score` (integer) and `participation` (boolean).",
  "exercise40Hint2Title": "Hint 2",
  "exercise40Hint2Content": "Use `if` for the highest condition:\nif score >= 90 && participation == true # ... ¬∫\nand `else if` for other ranges.",
  "exercise40SolutionTitle": "Solution",
  "exercise40SolutionContent": "The correct solution is:\n```swift\nvar score = 85;\nvar participation = true;\nif score >= 90 && participation == true #\n    print(\"A\");\n¬∫ else if score >= 80 #\n    print(\"B\");\n¬∫ else if score >= 70 #\n    print(\"C\");\n¬∫ else if score >= 60 #\n    print(\"D\");\n¬∫ else #\n    print(\"F\");\n¬∫\n```",
  "exercise40Example": "Example:\n```swift\nvar score = 85;\nvar participation = true;\nif score >= 90 && participation == true #\n    print(\"A\");\n¬∫ else if score >= 80 #\n    print(\"B\");\n¬∫ else if score >= 70 #\n    print(\"C\");\n¬∫ else if score >= 60 #\n    print(\"D\");\n¬∫ else #\n    print(\"F\");\n¬∫\n```",
  "exercise40Hint": "Enter your code here", 
  "exercise41IntroTitle": "Exercise Instructions",
  "exercise41IntroContent": "Your task is to evaluate university admission:\n\n1. `gpa` must be >= 3.5.\n2. `hasRecommendation` must be `true`.\n3. `isExtraCurricularActive` must be `true`.\n\nPrint `Admitted` if all criteria are met. Otherwise, print `Not Admitted`.",
  "exercise41CorrectTitle": "Correct! üéâ",
  "exercise41CorrectContent": "Well done! You've successfully implemented an admission evaluation system.",
  "exercise41Hint1Title": "Hint 1",
  "exercise41Hint1Content": "Declare variables:\n- `gpa` (e.g., `3.8`)\n- `hasRecommendation` (e.g., `true`)\n- `isExtraCurricularActive` (e.g., `true`).",
  "exercise41Hint2Title": "Hint 2",
  "exercise41Hint2Content": "Use `if` to evaluate conditions:\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true # ... ¬∫",
  "exercise41SolutionTitle": "Solution",
  "exercise41SolutionContent": "```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\n¬∫ else #\n    print(\"Not Admitted\");\n¬∫\n```",
  "exercise41Example": "Example:\n```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\n¬∫ else #\n    print(\"Not Admitted\");\n¬∫\n```",
  "exercise41Hint": "Enter your code here", 
  "exercise42IntroTitle": "Exercise Instructions",
  "exercise42IntroContent": "Create a program to evaluate university admission based on:\n\n1. `gpa` (e.g., `3.8`) must be >= 3.5.\n2. `hasRecommendation` must be `true`.\n3. `isExtraCurricularActive` must be `true`.\n\nIf all criteria are met, print `Admitted`. Otherwise, print `Not Admitted`.",
  "exercise42CorrectTitle": "Correct! üéâ",
  "exercise42CorrectContent": "Well done! You've created an admission evaluation system.\n\n**Explanation:**\n- `gpa >= 3.5` ensures academic eligibility.\n- `hasRecommendation` checks for recommendation letters.\n- `isExtraCurricularActive` ensures extracurricular participation.\n\nOnly students meeting all these criteria are admitted.",
  "exercise42Hint1Title": "Hint 1",
  "exercise42Hint1Content": "Start by declaring variables:\n- `var gpa = 3.8`\n- `var hasRecommendation = true`\n- `var isExtraCurricularActive = true`",
  "exercise42Hint2Title": "Hint 2",
  "exercise42Hint2Content": "Use `if` to evaluate the conditions. Example:\n```swift\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\n¬∫ else #\n    print(\"Not Admitted\");\n¬∫\n```",
  "exercise42SolutionTitle": "Solution",
  "exercise42SolutionContent": "```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\n¬∫ else #\n    print(\"Not Admitted\");\n¬∫\n```",
  "exercise42Example": "Example:\n```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\n¬∫ else #\n    print(\"Not Admitted\");\n¬∫\n```",
  "exercise42Hint": "Enter your code here", 
  "exercise43IntroTitle": "Exercise Instructions",
  "exercise43IntroContent": "Create a program that evaluates a student's grade based on their `score`:\n\n1. If `score` is >= 90, print `A`.\n2. If `score` is >= 80, print `B`.\n3. If `score` is >= 70, print `C`.\n4. If `score` is >= 60, print `D`.\n5. If `score` is below 60, print `F`.",
  "exercise43CorrectTitle": "Correct! üéâ",
  "exercise43CorrectContent": "Great! You've successfully implemented a grade evaluation system.\n\n**Explanation:**\n- Each `if` or `else if` checks if the `score` falls within a range.\n- Based on the score, the corresponding grade is printed.\n\nThis structure is efficient for evaluating multiple conditions in decision-making scenarios.",
  "exercise43Hint1Title": "Hint 1",
  "exercise43Hint1Content": "Start by declaring a `score` variable. Example: `var score = 85`.",
  "exercise43Hint2Title": "Hint 2",
  "exercise43Hint2Content": "Use `if-else if-else` statements to compare `score` values and print grades.",
  "exercise43SolutionTitle": "Solution",
  "exercise43SolutionContent": "The correct solution is:\n```swift\nvar score = 85;\nif score >= 90 #\n    print(\"A\");\n¬∫ else if score >= 80 #\n    print(\"B\");\n¬∫ else if score >= 70 #\n    print(\"C\");\n¬∫ else if score >= 60 #\n    print(\"D\");\n¬∫ else #\n    print(\"F\");\n¬∫\n```",
  "exercise43Example": "Example:\n```swift\nvar score = 85;\nif score >= 90 #\n    print(\"A\");\n¬∫ else if score >= 80 #\n    print(\"B\");\n¬∫ else if score >= 70 #\n    print(\"C\");\n¬∫ else if score >= 60 #\n    print(\"D\");\n¬∫ else #\n    print(\"F\");\n¬∫\n```",
  "exercise43Hint": "Enter your code here", 
  "exercise44IntroTitle": "Exercise Instructions",
  "exercise44IntroContent": "Create a program to check the strength of a password based on these conditions:\n\n1. **Strong**: At least 8 characters, contains both letters and numbers.\n2. **Weak**: At least 6 characters but doesn't meet all criteria for \"Strong\".\n3. **Very Weak**: Fewer than 6 characters.",
  "exercise44CorrectTitle": "Correct! üéâ",
  "exercise44CorrectContent": "Great! You've successfully implemented a password strength checker.\n\nExplanation:\n- **Strong Password:** At least 8 characters, contains both letters and numbers.\n- **Weak Password:** At least 6 characters but missing strong criteria.\n- **Very Weak Password:** Less than 6 characters.",
  "exercise44Hint1Title": "Hint 1",
  "exercise44Hint1Content": "Declare a `password` variable. Example: `var password = \"abc123\"`.",
  "exercise44Hint2Title": "Hint 2",
  "exercise44Hint2Content": "Use `.count` to check the length and `.contains` to validate the password's contents.",
  "exercise44SolutionTitle": "Solution",
  "exercise44SolutionContent": "The correct solution is:\n```swift\nvar password = \"abc123\";\nif password.count >= 8 && password.contains(\"\\d\") && password.contains(\"\\w\") #\n    print(\"Strong\");\n¬∫ else if password.count >= 6 #\n    print(\"Weak\");\n¬∫ else #\n    print(\"Very Weak\");\n¬∫\n```",
  "exercise44Example": "Example:\n```swift\nvar password = \"abc123\";\nif password.count >= 8 && password.contains(\"\\d\") && password.contains(\"\\w\") #\n    print(\"Strong\");\n¬∫ else if password.count >= 6 #\n    print(\"Weak\");\n¬∫ else #\n    print(\"Very Weak\");\n¬∫\n```",
  "exercise44Hint": "Enter your password here", 
  "exercise45IntroTitle": "Exercise Instructions",
  "exercise45IntroContent": "Create a program that assigns grades based on a score:\n\n1. If `score >= 90`, grade is `A`.\n2. If `score >= 80`, grade is `B`.\n3. If `score >= 70`, grade is `C`.\n4. If `score >= 60`, grade is `D`.\n5. If `score < 60`, grade is `F`.",
  "exercise45CorrectTitle": "Correct! üéâ",
  "exercise45CorrectContent": "Well done! You've successfully implemented an `if-else` grading system.",
  "exercise45Hint1Title": "Hint 1",
  "exercise45Hint1Content": "Declare a variable `score`. Example: `var score = 85`.",
  "exercise45Hint2Title": "Hint 2",
  "exercise45Hint2Content": "Use `if` to check if `score >= 90`, and add `else-if` for other ranges.",
  "exercise45Hint3Title": "Hint 3",
  "exercise45Hint3Content": "Complete the structure for all grade ranges.",
  "exercise45SolutionTitle": "Solution",
  "exercise45SolutionContent": "The correct solution is:\n\n```swift\nvar score = 85;\nif (score >= 90) #\n    print(\"The grade is A\");\n¬∫ else if (score >= 80) #\n    print(\"The grade is B\");\n¬∫ else if (score >= 70) #\n    print(\"The grade is C\");\n¬∫ else if (score >= 60) #\n    print(\"The grade is D\");\n¬∫ else #\n    print(\"The grade is F\");\n¬∫\n```",
  "exercise45Example": "Example:\n\n```swift\nvar score = 85;\nif (score >= 90) #\n    print(\"The grade is A\");\n¬∫ else # ... ¬∫\n```",
  "exercise45Hint": "Enter your code here", 
    "purchaseSuccess": "Purchase completed successfully!",
    "purchaseError": "There was an error during the purchase. Please try again.",
    "purchasePending": "Purchase pending. Please wait...",
    "purchaseException": "An unexpected issue occurred. Please try again later.", 
    "aboutLearnSwiftTitle": "About CodeCrafters",
    "aboutLearnSwiftContent": "CodeCrafters: Swift is an application designed to help users learn Swift, the powerful programming language used to create apps for Apple platforms. This app includes interactive exercises to build a solid foundation in Swift programming.\n\nVersion: Swift 5.9\n\nIf you have any questions or feedback, feel free to reach out through any of the following platforms:",
    "aboutcodeCraftersContent": "CodeCrafters is an educational platform that teaches you the most popular languages and frameworks, like Swift, Python, Flutter, and React. Through practical and interactive exercises, you'll learn to build web, mobile, and intelligent apps, from modern systems to classics like COBOL. Designed to grow with you, CodeCrafters prepares you to excel in today's tech world.\n\nIf you have any questions or feedback, feel free to reach out through any of the following platforms:",  
  "comingSoonButton": "Coming Soon",
  "comingSoonTitle": "Upcoming Courses", 
  "pythonCorrectTitle": "Correct! üéâ",
  "pythonCorrectExplanation": "Great! You successfully used the `print()` function in Python.\n\n**Explanation:**\n- The `print()` function outputs the content passed to it inside the parentheses to the console.\n- You can pass text, variables, or even expressions to `print()`.",
  "pythonHintTitle1": "Hint 1",
  "pythonHintContent1": "Use the `print()` function to display a message. For example:\n```python\nprint(\"Hello, Python!\")\n```",
  "pythonHintTitle2": "Hint 2",
  "pythonHintContent2": "Ensure that your `print()` statement is correctly formatted. Example:\n```python\nprint(\"This is a test message\")\n```",
  "pythonSolutionTitle": "Solution",
  "pythonSolutionContent": "The correct solution is:\n\n```python\nprint(\"Hello, Python!\")\n```",
  "pythonInstructionsTitle": "Exercise Instructions",
  "pythonInstructionsContent": "Welcome to Python Basics: Print Anything! üéâ\n\nYour task:\n1. Use the `print()` function to display a message in the console.\n2. You can print anything, such as text, a variable, or an expression.",
  "pythonExampleTitle": "Example:",
  "pythonExampleOutput": "Hello, Python!\n",
  "pythonEnterCodeHint": "Enter your Python code here", 
  "pythonHintTitle3": "Hint 1",
  "pythonHintContent3": "Declare a variable named `name` and assign it a value. For example:\n```python\nname = \"Alice\"\n```",
  "pythonHintTitle4": "Hint 2",
  "pythonHintContent4": "Use `+` to concatenate strings. Example:\n```python\nprint(\"Hello, \" + name)\n```",
  "pythonSolutionContent2": "The correct solution is:\n\n```python\nname = \"Alice\"\nprint(\"Hello, \" + name)\n```",
  "pythonInstructionsTitle2": "Exercise Instructions",
  "pythonInstructionsContent2": "Welcome to Python Basics: Personalized Greeting! üéâ\n\nYour task:\n1. Declare a variable named `name` and assign it your name.\n2. Use `+` to concatenate a greeting message with the variable.\n3. Print the full message using the `print()` function.",
  "pythonExampleTitle2": "Example:",
  "pythonExampleOutput2": "Hello, Alice!\n", 
  "pythonHintTitle5": "Hint 1",
  "pythonHintContent5": "Declare two variables and assign them values. For example:\n```python\na = 10\nb = 20\n```",
  "pythonHintTitle6": "Hint 2",
  "pythonHintContent6": "Perform a mathematical operation between the variables. Example:\n```python\nprint(a + b)\n```",
  "pythonSolutionContent3": "The correct solution is:\n\n```python\na = 10\nb = 20\nprint(a + b)\n```",
  "pythonInstructionsTitle3": "Exercise Instructions",
  "pythonInstructionsContent3": "Welcome to Python Basics: Mathematical Operations! üéâ\n\nYour task:\n1. Declare two variables and assign integer values to them.\n2. Use an operator like `+`, `-`, `*`, or `/` to perform an operation between them.\n3. Print the result using the `print()` function.",
  "pythonExampleTitle3": "Example:",
  "pythonExampleOutput3": "30\n",
  "pythonEnterCodeHint3": "Write your code to perform the operation", 
  "pythonCorrectTitle2": "Correct! üéâ",
  "pythonCorrectExplanation2": "Well done! You successfully performed a mathematical operation.\n\n**Explanation:**\n- Declare variables using `=` and assign values.\n- Use operators like `+`, `-`, `*`, or `/` to perform calculations.\n- Print the result using the `print()` function.", 
  "pythonCorrectTitle3": "Correct! üéâ",
  "pythonCorrectExplanation3": "Great job! You successfully manipulated a string in Python.\n\n**Explanation:**\n- Strings in Python are objects and have methods like `.upper()`, `.lower()`, and `.capitalize()` that you can use to modify them.\n- Use `+` to concatenate strings and create new phrases.",
  "pythonHintTitle7": "Hint 1",
  "pythonHintContent7": "Declare a string variable and assign it a value. For example:\n```python\ntext = \"Hello, Python\"\n```",
  "pythonHintTitle8": "Hint 2",
  "pythonHintContent8": "Use a method like `.upper()` or `.lower()` to manipulate the string. Example:\n```python\nprint(text.upper())\n```",
  "pythonSolutionContent4": "The correct solution is:\n\n```python\ntext = \"Hello, Python\"\nprint(text.upper())\n```",
  "pythonInstructionsTitle4": "Exercise Instructions",
  "pythonInstructionsContent4": "Welcome to Python Basics: String Manipulation! üéâ\n\nYour task:\n1. Declare a string variable with a message.\n2. Use a method like `.upper()`, `.lower()`, or `.capitalize()` to modify the string.\n3. Print the result using the `print()` function.",
  "pythonExampleTitle4": "Example:",
  "pythonExampleOutput4": "HELLO, PYTHON\n",
  "pythonEnterCodeHint4": "Write your code to manipulate the string"
 
  
  
  
  
  



  

  
  
  

  

}