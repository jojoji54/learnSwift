{
    "close": "Close",
    "correctTitle": "Correct! üéâ",
    "correctContent": "Great! You've successfully declared a variable in Swift.\n\nExplanation:\n1. You used the `var` keyword to create a variable.\n2. The variable name can be any valid identifier, like `greeting`, `message`, or `g`.\n3. The value assigned to the variable must be a valid string enclosed in double quotes (`\"`).",
    "hint1Title": "Hint 1",
    "hint1Content": "Use the `var` keyword to declare variables. For example:\n`var variableName = \"value\"`.",
    "hint2Title": "Hint 2",
    "hint2Content": "Make sure you're using straight quotes (`\"`) and not curly quotes (`‚Äú` or `‚Äù`).",
    "solutionTitle": "Solution",
    "solutionContent": "The correct syntax is:\n\n`var variableName = \"value\"`\n\nExample:\n`var greeting = \"Hello, World!\"`\n`var g = \"Swift\"`",
    "tryAgain": "Try again! ({failedAttempts}/3 attempts)",
    "exerciseInstructionsTitle": "Exercise Instructions",
    "exerciseInstructionsContent": "Welcome to your first exercise in Swift! üéâ\nYour task: Declare a variable named `greeting` and assign it the value \"Hello, World!\".\n\nExample:\nvar greeting = \"Hello, World!\"\n\nTip: Use the `var` keyword to declare a variable.",
    "enterYourCodeHere": "Enter your code here",
    "varKeyword": "var",
    "exercise2InstructionsContent": "Welcome to the second exercise in Swift! üéâ\n\nYour task:\n1. Declare a variable named `number` and assign it the value 5.\n2. Update the value of `number` by adding a number to it.\n\nExample:\nvar number = 5\nnumber = number + 10",
    "exercise2CorrectContent": "Great! You've successfully declared and updated a variable in Swift.\n\nExplanation:\n1. You declared a variable named `number` and assigned it an initial value of 5.\n2. Then, you updated its value by adding a number to it.\n\nThis demonstrates how variables can be both declared and modified in Swift.",
    "exercise2Hint1Content": "Use the `var` keyword to declare a variable. Assign an initial value like `var number = 5`.",
    "exercise2Hint2Content": "After declaring the variable, update its value by adding a number, e.g., `number = number + 10`.",
    "exercise2SolutionContent": "The correct solution is:\n\nvar number = 5;\nnumber = number + 10;",
    "exercise3InstructionsContent": "Welcome to your third exercise in Swift! üéâ\n\nYour task:\n1. Use the `print()` function to display a message in the console.\n2. Try using any message you like inside the parentheses.\n\nHint: Make sure your text is inside double quotes and follows the format `print(\"Your message\")`.",
    "exercise3CorrectContent": "Well done! You've successfully used the `print()` function.\n\nExplanation:\nThe `print()` function allows you to display any message in the console. For example:\n- print(\"Swift is fun!\")\n- print(\"Hello, world!\")\nFeel free to experiment with different messages.",
    "exercise3SolutionContent": "The correct answer is any valid use of the `print()` function. For example:\n\nprint(\"Swift is fun!\")\nprint(\"Learning is awesome!\")",
    "exercise4InstructionsContent": "Welcome to this exercise in Swift! üéâ\n\nYour task: Declare variables and perform an arithmetic operation.\nExample:\nvar a = 5\nvar b = a\nvar sum = a + b\nprint(sum)",
    "exercise4CorrectContent": "Great! You've successfully declared variables and performed arithmetic operations in Swift!\n\nExplanation:\n1. You used the `var` keyword to declare variables.\n2. You assigned values to the variables, including one variable depending on another.\n3. You performed an arithmetic operation (`a + b`) and stored the result in a new variable `sum`.\n4. Finally, you used `print(sum)` to display the result in the console.\n\nUnderstanding how to declare variables and use arithmetic operations is a fundamental step in programming.",
    "exercise4Hint1Content": "Remember to use the `var` keyword to declare variables and assign them values.",
    "exercise4Hint2Content": "Think about assigning a value to one variable using another, like `var b = a`.",
    "exercise4Hint3Content": "Structure your code like this:\n1. Declare two variables.\n2. Add them together.\n3. Print the result.",
    "hint3Title": "Hint 3",
    "exercise5InstructionsContent": "Welcome to this exercise in Swift! üéâ\n\nYour task: Declare a variable and use string interpolation.\nExample:\nvar name = \"John\"\nprint(\"Hello, my name is \\(name)!\")",
    "exercise5CorrectContent": "Well done! You've successfully used string interpolation in Swift!\n\nExplanation:\n1. You declared a variable `name` and assigned it a value.\n2. You used the `print()` function to display a message.\n3. Inside `print()`, you included the variable `name` in the text using string interpolation (`\\(name)`).\n\nString interpolation allows you to combine variables and text dynamically, making your code more powerful and expressive.",
    "exercise5Hint1Content": "Remember to use the `var` keyword to declare a variable and assign it a value (e.g., var name = \"John\").",
    "exercise5Hint2Content": "Use string interpolation to combine a variable and text inside `print()`. For example: print(\"Hello, my name is \\(name)!\").",
    "exercise5Hint3Content": "Structure your code like this:\n1. Declare a variable `name` and assign a value to it.\n2. Use string interpolation to include `name` in a message using `print()`.",
    "exercise6InstructionsContent": "Welcome to this exercise in Swift! üéâ\n\nYour task: Calculate the area of a rectangle.\n1. Declare variables `length` and `width`.\n2. Multiply them to calculate the area.\n3. Use `print()` to display the result.\n\nExample:\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
    "exercise6CorrectContent": "Great job! You've successfully calculated the area of a rectangle.\n\nExplanation:\n1. `var length` and `var width` are used to declare dimensions of the rectangle.\n2. Multiplying them gives the `area`.\n3. `print(area)` displays the result.",
    "exercise6Hint1Content": "Remember to use the `var` keyword to declare variables.",
    "exercise6Hint2Content": "Use `length * width` to calculate the area.",
    "exercise6Hint3Content": "Here's the correct structure:\n1. Declare two variables for `length` and `width`.\n2. Multiply them to calculate `area`.\n3. Print the result.",
    "exercise6SolutionContent": "The correct answer is:\n\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
    "exercise7InstructionsContent": "Your task: Combine two strings using concatenation.\n\nExample:\nvar firstName = \"John\"\nvar lastName = \"Doe\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
    "exercise7CorrectContent": "Well done! You've successfully concatenated strings in Swift.\n\nExplanation:\n1. You declared two `String` variables.\n2. You used the `+` operator to concatenate them.\n3. Finally, you used `print()` to display the combined string.",
    "exercise7Hint1Content": "Use the `+` operator to concatenate strings.",
    "exercise7Hint2Content": "Combine the strings and include a space between them.",
    "exercise7SolutionContent": "The correct answer is:\n\nvar firstName = \"John\"\nvar lastName = \"Doe\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
    "exercise8InstructionsContent": "Your task: Declare variables of different types (`Int`, `Double`, `String`, `Bool`) and print them.\n\nExample:\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)",
    "exercise8CorrectContent": "Great! You've successfully declared variables with different data types in Swift.\n\nExplanation:\n1. `Int` is used for whole numbers.\n2. `Double` is used for decimal numbers.\n3. `String` is used for text.\n4. `Bool` is used for true/false values.\n5. `print()` displays the values of variables.",
    "exercise8Hint1Content": "Make sure you specify the type of each variable. For example: `var age: Int = 25`.",
    "exercise8Hint2Content": "Remember to print all variables using `print(variableName)`.",
    "exercise8SolutionContent": "The correct answer is:\n\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)", 
    "exercise9InstructionsContent": "Your task: Declare constants using `let` and print their values.\n\nExample:\nlet pi = 3.14159\nlet appName = \"Swift Learning\"\nprint(pi)\nprint(appName)",
    "exercise9CorrectContent": "Well done! You successfully declared constants in Swift and used them in your code.\n\nExplanation:\n1. `let` is used to declare constants.\n2. Constants cannot be changed once assigned a value.\n3. You printed the constants correctly to verify their values.",
    "exercise9Hint1Content": "Remember to use the `let` keyword to declare constants.",
    "exercise9Hint2Content": "Ensure that your constants are being printed correctly, like `print(constantName)`.",
    "exercise9SolutionContent": "The correct answer is:\n\nlet pi = 3.14159\nlet appName = \"Swift Learning\"\nprint(pi)\nprint(appName)", 
    "exercise10InstructionsContent": "Your task: Create an array with three integers and print specific elements.\n\nExample:\nvar fruits = [\"Apple\", \"Banana\", \"Cherry\"]\nprint(fruits[0])\nprint(fruits[2])",
    "exercise10CorrectContent": "Great! You have successfully created an array and accessed its elements.\n\nExplanation:\n1. Arrays are collections of ordered values.\n2. You used square brackets `[]` to create the array.\n3. To access elements, you used their index inside square brackets, starting from `0`.",
    "exercise10Hint1Content": "Start by creating an array using square brackets `[]`.",
    "exercise10Hint2Content": "Access elements in the array using their index. Remember, indexes start from 0.",
    "exercise10SolutionContent": "The correct answer is:\n\nvar numbers = [1, 2, 3]\nprint(numbers[0])\nprint(numbers[2])", 
    "exercise11InstructionsContent": "Your task: Create and call a function that prints a message.\n\nExample:\nfunc greet() @\n    print(\"Hello, World!\")\n&\ngreet()",
    "exercise11CorrectContent": "Great! You've successfully created and called a function in Swift.\n\nExplanation:\n1. You declared a function using the `func` keyword.\n2. Inside the function, you used `print()` to display a message.\n3. Finally, you called the function by its name followed by `()`.",
    "exercise11Hint1Content": "Start by declaring a function using the `func` keyword.",
    "exercise11Hint2Content": "Inside the function, use `print()` to display a message.",
    "exercise11SolutionContent": "The correct answer is:\n\nfunc greet() @\n    print(\"Hello, World!\")\n&\ngreet()", 
    "exercise12InstructionsContent": "Your task: Perform basic arithmetic operations.\n\nExample:\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)",
    "exercise12CorrectContent": "Great! You've successfully performed arithmetic operations in Swift.\n\nExplanation:\n1. Declared variables for numbers.\n2. Performed addition, subtraction, multiplication, and division.\n3. Printed the results to the console.",
    "exercise12Hint1Content": "Start by declaring two variables using the `var` keyword.",
    "exercise12Hint2Content": "Use `+`, `-`, `*`, and `/` for arithmetic operations.",
    "exercise12SolutionContent": "The correct answer is:\n\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)", 
    "exercise13InstructionsContent": "Your task: Declare constants and print their values.\n\nExample:\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)",
    "exercise13CorrectContent": "Great! You've successfully declared constants in Swift.\n\nExplanation:\n1. Declared constants using `let`.\n2. Assigned values of different data types (numbers, strings, booleans).\n3. Printed their values to the console.",
    "exercise13Hint1Content": "Start by using the `let` keyword to declare constants.",
    "exercise13Hint2Content": "Assign values of different types (e.g., a number, a string, a boolean) to the constants.",
    "exercise13SolutionContent": "The correct answer is:\n\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)", 
    "exercise14InstructionsContent": "Combine concepts: create a constant for pi, write a function to calculate circle areas, use an array of radii, and print results.",
    "exercise14CorrectContent": "Great! You've successfully combined multiple Swift concepts.\n\nExplanation:\n1. Declared a constant for the value of pi.\n2. Created a function to calculate the area of a circle.\n3. Used an array to store radii.\n4. Stored the calculated areas in a new array and printed the results.",
    "exercise14Hint1Content": "Declare a constant for the value of pi using `let`.",
    "exercise14Hint2Content": "Write a function that calculates the area of a circle using a radius.",
    "exercise14SolutionContent": "The correct answer is:\n\nlet pi = 3.14159\nfunc calculateCircleArea(radius: Double) -> Double @\n    return pi * radius * radius\n&\nlet radii = [3.0, 4.5, 6.7]\nvar areas = [Double]()\nfor radius in radii @\n    areas.append(calculateCircleArea(radius: radius))\n&\nprint(areas)", 
    "exercise15InstructionsContent": "Write two functions for temperature conversion: Celsius to Fahrenheit and Fahrenheit to Celsius. Use constants for temperatures and print the results.",
    "exercise15CorrectContent": "Fantastic! You've successfully created a temperature converter.\n\nExplanation:\n1. Defined functions for converting Celsius to Fahrenheit and vice versa.\n2. Declared constants for initial temperatures.\n3. Printed the results of the conversions.",
    "exercise15Hint1Content": "Define a function for Celsius to Fahrenheit using the formula `(Celsius * 9 / 5) + 32`.",
    "exercise15Hint2Content": "Define a function for Fahrenheit to Celsius using the formula `(Fahrenheit - 32) * 5 / 9`.",
    "exercise15SolutionContent": "The correct answer is:\n\nfunc convertToFahrenheit(celsius: Double) -> Double @\n    return (celsius * 9 / 5) + 32\n&\nfunc convertToCelsius(fahrenheit: Double) -> Double @\n    return (fahrenheit - 32) * 5 / 9\n&\nlet tempInCelsius = 25.0\nlet tempInFahrenheit = 77.0\nprint(convertToFahrenheit(celsius: tempInCelsius))\nprint(convertToCelsius(fahrenheit: tempInFahrenheit))", 
    "exercise3Hint1Content": "Remember to use the `print()` function to display a message in the console.\n\nFor example:\n```swift\nprint(\"Hello, World!\")\n```", 
    "exercise3Hint2Content": "Make sure your message is enclosed in double quotes.\n\nExample:\n```swift\nprint(\"Swift is fun!\")\n```", 
    "unlockExerciseTitle": "Unlock Exercise?",
    "unlockExerciseContent": "Do you want to unlock the exercise \"{exerciseName}\"? You can do so in the following ways:",
    "cancel": "Cancel",
    "buyExercise": "Buy this exercise",
    "buyAllExercises": "Unlock all exercises",
    "restorePurchases": "Restore purchases",
    "@unlockExerciseContent": {
      "description": "Message displayed when asking the user if they want to unlock a specific exercise",
      "placeholders": {
        "exerciseName": {
          "type": "String",
          "example": "Hello World"
        }
      }
    }, 
    "purchaseUnavailable": "Purchases are not available at the moment.",
  "purchaseInitiated": "The purchase has been initiated.",
  "productNotFound": "Product not found.", 
  "restoreSuccess": "Purchases restored successfully!",
  "restoreError": "An error occurred during the restoration.",
  "noPurchasesToRestore": "No purchases to restore.",
  "unexpectedRestoreError": "Unexpected error during restoration.", 
  "exercise151InstructionsContent": "Welcome to Boolean Basics! üéâ\n\nYour task:\n1. Declare a variable of type boolean using the `var` keyword.\n2. Assign it the value `true` or `false`.\n\nExample:\n```swift\nvar isSwiftFun = true\n```",
  "exercise151SolutionContent": "The correct solution is:\n\n```swift\nvar isSwiftFun = true\n```",
  "exercise15Hint1Title": "Hint 1",
  "exercise151Hint1Content": "Use the `var` keyword to declare a variable. Assign it a boolean value like `true` or `false`.",
  "exercise151Hint2Title": "Hint 2",
  "exercise151Hint2Content": "A correct example is:\n```swift\nvar isSwiftFun = true\n```", 
  "booleanExplanation": "Great! You've successfully combined boolean variables using logical operators.\n\nExplanation:\n- The `&&` operator checks if both conditions are true.\n- The `||` operator checks if at least one condition is true.\n\nBy using these operators, you can make decisions based on multiple conditions.",
  "hint1Boolean": "Start by declaring two boolean variables: `var isSunny = true` and `var isWeekend = false`.",
  "hint2Boolean": "Use the `&&` operator to check if both conditions are true. For example: `var goToBeach = isSunny && isWeekend`.",
  "exerciseInstructionsBoolean": "Welcome to Boolean Operations! üéâ\n\nYour task:\n1. Declare two boolean variables: `isSunny` and `isWeekend`.\n2. Combine them using `&&` or `||` and assign the result to `goToBeach`.\n3. Print the result.", 
   "exercise16SolutionContent": "The correct solution is:\n\n```swift\nvar isSunny = true;\nvar isWeekend = false;\nvar goToBeach = isSunny && isWeekend;\nprint(goToBeach);\n```",
  "example": "Example", 
  "booleanComparisonExplanation": "Great! You've successfully used boolean comparisons in Swift.\n\nExplanation:\n- `!isHot` checks if `isHot` is `false`.\n- `!isCold` checks if `isCold` is `false`.\n- Combining these conditions using `&&` determines if the environment is comfortable.\n\nThis exercise demonstrates how to use logical operators with comparisons to evaluate complex conditions.",
  "hint1BooleanComparison": "Declare two boolean variables: `isHot` and `isCold`. Assign them values like `true` or `false`.",
  "hint2BooleanComparison": "Use the `!` operator to invert a boolean value, e.g., `!isHot` checks if `isHot` is `false`.",
  "exerciseInstructionsBooleanComparison": "Welcome to Boolean Comparisons! üéâ\n\nYour task:\n1. Declare two boolean variables: `isHot` and `isCold`.\n2. Combine them using the `!` operator and the `&&` operator to determine if `isComfortable` is `true`.\n3. Print the result.",
  "exercise17SolutionContent": "The correct solution is:\n\n```swift\nvar isHot = false;\nvar isCold = false;\nvar isComfortable = !isHot && !isCold;\nprint(isComfortable);\n```", 
  "booleanWalkingExplanation": "Great! You've successfully used logical operators to combine boolean values in Swift.\n\nExplanation:\n- `isSunny` checks if it is sunny.\n- `hasUmbrella` checks if you have an umbrella.\n- `canGoWalking` combines these two values using the `||` operator to decide if you can go walking.\n\nExample:\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking) // true\n```",
  "hint1BooleanWalking": "Use the `var` keyword to declare the variables. Assign boolean values like `true` or `false`.",
  "hint2BooleanWalking": "Combine the boolean values using the `||` operator. For example:\n```swift\nvar canGoWalking = isSunny || hasUmbrella\n```",
  "exerciseInstructionsBooleanWalking": "Welcome to Boolean Operations! üéâ\n\nYour task:\n1. Declare two boolean variables: `isSunny` and `hasUmbrella`.\n2. Combine them using the `||` operator to decide if you can go walking.\n\nExample:\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```",
  "exercise18SolutionContent": "The correct solution is:\n\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```", 
  "logicalOperatorsExplanation": "Great! You've successfully used logical operators to decide if you can go outside.\n\nExplanation:\n- `isRaining` checks if it is raining.\n- `haveUmbrella` checks if you have an umbrella.\n- `canGoOutside` combines these two values using the `||` operator to determine if you can go outside.\n\nExample:\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\nprint(canGoOutside)\n```",
  "hint1LogicalOperators": "Declare two variables: `isRaining` and `haveUmbrella`. Assign them boolean values like `true` or `false`.",
  "hint2LogicalOperators": "Combine the variables using the logical operators `&&` and `||`.",
  "exerciseInstructionsLogicalOperators": "Welcome to the Logical Operators Exercise! üéâ\n\nYour task:\n1. Declare two boolean variables: `isRaining` and `haveUmbrella`.\n2. Use the `||` operator to decide if you can go outside.\n\nExample:\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\n```",
  "exercise19SolutionContent": "The correct solution is:\n\n```swift\nvar isRaining = true;\nvar haveUmbrella = true;\nvar canGoOutside = !isRaining || haveUmbrella;\nprint(canGoOutside);\n```", 
  "logicalOrExplanation": "Great! You've successfully used the logical OR operator in Swift.\n\nExplanation:\n- The `||` operator returns `true` if **either** of the conditions is true.\n- Example: `let isSunny = true || false` evaluates to `true` because one of the conditions is true.",
  "hint1LogicalOr": "Use the `||` operator to check if **either** of two conditions is true.",
  "hint2LogicalOr": "An example syntax is:\n```swift\nlet isSunny = true || false\n```",
  "exerciseInstructionsLogicalOr": "Welcome to Logical OR Operator Basics! üéâ\n\nYour task:\n1. Use the `let` keyword to declare a constant.\n2. Assign it a value that uses the logical OR operator (`||`).\n\nExample:\n```swift\nlet isSunny = true || false\n```",
  "exercise20SolutionContent": "The correct solution is:\n\n```swift\nlet isSunny = true || false\n```", 
  "booleanNegationExplanation": "Great! You've successfully used the boolean negation operator in Swift.\n\nExplanation:\n- The `!` operator negates a boolean value. For example, if `isSwiftFun` is `true`, `!isSwiftFun` becomes `false`.",
  "hint1BooleanNegation": "Use the `var` keyword to declare two variables. Assign one a boolean value and negate it for the other.",
  "hint2BooleanNegation": "A correct example is:\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exerciseInstructionsBooleanNegation": "Welcome to Boolean Negation! üéâ\n\nYour task:\n1. Declare a boolean variable using the `var` keyword.\n2. Declare another variable and assign it the negated value of the first variable.\n\nExample:\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exercise21SolutionContent": "The correct solution is:\n\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```", 
  "booleanShortCircuitExplanation": "Great! You've successfully worked with boolean short-circuit evaluation in Swift.\n\nExplanation:\n- The `||` operator evaluates to `true` if either condition is true, without evaluating the second condition if the first is true.\n- The `&&` operator evaluates to `true` only if both conditions are true.",
  "hint1BooleanShortCircuit": "Try using the `||` operator for 'OR' and `&&` for 'AND'.",
  "hint2BooleanShortCircuit": "Remember, `||` evaluates the first condition first, while `&&` requires both conditions to be true.",
  "exerciseInstructionsBooleanShortCircuit": "Welcome to Boolean Short-Circuit Evaluation! üéâ\n\nYour task:\n1. Declare a variable using the `var` keyword.\n2. Use `||` (OR) and `&&` (AND) operators to create a boolean expression.\n\nExample:\n```swift\nvar result = (true || false) && true\n```",
  "exercise22SolutionContent": "The correct solution is:\n\n```swift\nvar result = (true || false) && true\n```", 
  "ternaryOperatorExplanation": "Great! You've successfully used the conditional ternary operator in Swift.\n\nExplanation:\n- The ternary operator `? :` allows you to choose between two values based on a condition.\n- Example:\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```\nHere, `message` will hold the value `Swift is great!` because the condition is `true`.",
  "hint1TernaryOperator": "Use the ternary operator `? :` to choose between two values based on a condition.",
  "hint2TernaryOperator": "A correct example is:\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```",
  "exerciseInstructionsTernaryOperator": "Welcome to the Conditional Ternary Operator! üéâ\n\nYour task:\n1. Declare a variable using the `var` keyword.\n2. Use the ternary operator `? :` to assign it a value based on a boolean condition.\n\nExample:\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```",
  "exercise23SolutionContent": "The correct solution is:\n\n```swift\nvar message = (true ? \"Swift is great!\" : \"Swift is okay\")\n```", 
  "ifElseExplanation": "Great! You've successfully used a boolean in an `if-else` statement.\n\nExplanation:\n- Boolean variables can be used in conditional statements to control program flow.\n- Example:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```",
  "hint1IfElse": "Declare a boolean variable using `var`. Use it in an `if-else` statement to control what gets printed.",
  "hint2IfElse": "A correct example is:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```",
  "exerciseInstructionsIfElse": "Welcome to Boolean in If-Else Statements! üéâ\n\nYour task:\n1. Declare a boolean variable using the `var` keyword.\n2. Use an `if-else` statement to print one of two messages depending on the boolean's value.\n\nExample:\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```",
  "exercise24SolutionContent": "The correct solution is:\n\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift is awesome!\")\n& else @\n  print(\"Keep trying!\")\n&\n```", 
  "nestedIfExplanation": "Great! You've successfully used nested `if` statements with booleans.\n\nExplanation:\n- This exercise demonstrates how to use nested `if` statements to handle multiple conditions.\n- Example:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```",
  "hint1NestedIf": "Use the `var` keyword to declare two boolean variables. Use nested `if` statements to check each condition.",
  "hint2NestedIf": "A correct example is:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```",
  "exerciseInstructionsNestedIf": "Welcome to Nested If Statements with Booleans! üéâ\n\nYour task:\n1. Declare two boolean variables using the `var` keyword.\n2. Use nested `if` statements to check both conditions.\n\nExample:\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```",
  "exercise25SolutionContent": "The correct solution is:\n\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"You nailed it!\")\n  & else @\n    print(\"Almost there!\")\n  &\n& else @\n  print(\"Try again!\")\n&\n```", 
    "passwordValidatorExplanation": "Great! You've successfully created a password validator using booleans.\n\nExplanation:\n- This exercise combines string operations and boolean logic.\n- A strong password must:\n  1. Be at least 8 characters long.\n  2. Contain an `@` symbol.\n  3. Contain a `$` symbol.\n\nExample solution:\n```swift\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"Strong password!\");\n> else <\n  print(\"Weak password.\");\n>```",
    "hint1PasswordValidator": "Start by declaring a variable named `password` with a string value. Use `.contains` to check for `@` and `$` symbols.",
    "hint2PasswordValidator": "Combine conditions with the `&&` operator:\nUse `if password.contains(\"@\") && password.contains(\"$\")`.",
    "passwordValidatorInstructions": "Welcome to the Password Validator Challenge! üéâ\n\nYour task:\n1. Declare a variable named `password` and assign it a string value.\n2. Use `if` statements to check if the password contains:\n   - At least 8 characters.\n   - An `@` symbol.\n   - A `$` symbol.\n3. If the password meets all criteria, print `Strong password!`. Otherwise, print `Weak password.`.",
    "exercise26SolutionContent": "The correct solution is:\n\n```swift\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"Strong password!\");\n> else <\n  print(\"Weak password.\");\n>```", 
    "gameLogicExplanation": "Great! You've successfully implemented a game logic using booleans and conditions.\n\nExplanation:\n- You declared variables `isAlive` and `health`.\n- Used a constant `damage` to subtract health.\n- Checked if health was below or equal to 0 to determine if the game is over.",
    "hint1GameLogic": "Declare variables `isAlive`, `health`, and a constant `damage`. Use `if` to check health.",
    "hint2GameLogic": "Remember to use:\n- `health -= damage` to subtract health.\n- `if (health <= 0)` to check game over conditions.",
    "gameLogicInstructions": "Welcome to the Boolean Game Logic Challenge! üéÆ\n\nYour task:\n1. Declare `isAlive` as `true`.\n2. Declare `health` as `100`.\n3. Subtract `damage` from `health`.\n4. Print `Game Over` if health <= 0. Otherwise, print `Keep Playing!`.\n\nExample:\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\n¬™ else #\n  print(\"Keep Playing!\");\n¬™",
    "exercise27SolutionContent": "The correct solution is:\n\n```swift\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\n¬™ else #\n  print(\"Keep Playing!\");\n¬™\n```", 
    "quizLogicExplanation": "Great! You've successfully implemented a quiz logic using booleans and conditions.\n\nExplanation:\n- `isAnswerCorrect` is a boolean constant that stores the user's response.\n- An `if` condition checks its value and displays the appropriate message.",
    "hint1QuizLogic": "Use a boolean constant named `isAnswerCorrect`. Write an `if` condition to check its value.",
    "hint2QuizLogic": "A correct example is:\n```swift\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"Correct Answer! üéâ\");\n¬∫ else #\n  print(\"Try Again!\");\n¬∫\n```",
    "quizLogicInstructions": "Welcome to the Boolean Quiz App Logic Challenge! üß†\n\nYour task:\n1. Declare `isAnswerCorrect` as a constant boolean.\n2. Write an `if-else` structure to check if the answer is correct.\n3. If correct, print `Correct Answer! üéâ`. Otherwise, print `Try Again!`.",
    "exercise28SolutionContent": "The correct solution is:\n\n```swift\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"Correct Answer! üéâ\");\n¬∫ else #\n  print(\"Try Again!\");\n¬∫\n```", 
    "booleanGuessExplanation": "Amazing! You've implemented a guessing game using booleans.\n\nExplanation:\n- `secretBoolean` holds a hidden value.\n- The user compares their guess to this value using the `==` operator.\n- Based on the comparison, you display the appropriate message.",
    "hint1BooleanGuess": "Use a constant `secretBoolean` with a boolean value. Declare another constant `userGuess` and compare both using `==`.",
    "hint2BooleanGuess": "A correct example is:\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"You guessed it! üéâ\");\n¬∫ else #\n  print(\"Wrong guess! Try again.\");\n¬∫\n```",
    "booleanGuessInstructions": "Welcome to the Boolean Guessing Challenge! üß†\n\nYour task:\n1. Declare a constant `secretBoolean` with a boolean value.\n2. Declare a constant `userGuess` representing the user's input.\n3. Compare both using the `==` operator.\n4. If the guess is correct, print `You guessed it! üéâ`. Otherwise, print `Wrong guess! Try again.`",
    "exercise29SolutionContent": "The correct solution is:\n\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"You guessed it! üéâ\");\n¬∫ else #\n  print(\"Wrong guess! Try again.\");\n¬∫\n```", 
    "booleanLogicExplanation": "Amazing! You've successfully used logical operators to evaluate conditions.\n\nExplanation:\n- `isUserLoggedIn` and `hasPremiumAccess` are boolean constants.\n- You used the `&&` (AND) operator to check if both are true.\n- Based on the evaluation, you printed the corresponding message.",
    "hint1BooleanLogic": "Use two constants `isUserLoggedIn` and `hasPremiumAccess` with boolean values.\nCheck both conditions using the `&&` operator.",
    "hint2BooleanLogic": "A correct example is:\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"Access granted to premium feature!\");\n¬∫ else #\n  print(\"Access denied. Please log in or upgrade.\");\n¬∫\n```",
    "booleanLogicInstructions": "Welcome to the Logical Operators Game! üß†\n\nYour task:\n1. Declare two constants: `isUserLoggedIn` and `hasPremiumAccess`.\n2. Use the `&&` operator to check if both conditions are true.\n3. If true, print `Access granted to premium feature!`.\n4. Otherwise, print `Access denied. Please log in or upgrade.`",
    "exercise30SolutionContent": "The correct solution is:\n\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"Access granted to premium feature!\");\n¬∫ else #\n  print(\"Access denied. Please log in or upgrade.\");\n¬∫\n```"

  
  
  

  

}