
import 'package:learnswift/data/courses/coursesExModel.dart';
import 'package:learnswift/data/courses/Swift/swiftBasics/sbExModelListZH.dart';

List<CoursesExModel> booleanBModelEN = [
  CoursesExModel(
    id: 15,
    exerciseName: 'Boolean Basics',
    productID: 'com.mrrubik.learnswift.swiftbasicex15',
     alreadyBuy: purchaseManagerHive.getPurchasedTrue(15),
    completed: purchaseManagerHive.getCompleted(15),
  ),
  CoursesExModel(
    id: 16,
    exerciseName: 'Boolean Operations',
    productID: 'com.mrrubik.learnswift.swiftbasicex16',
    alreadyBuy: purchaseManagerHive.getPurchasedTrue(16),
    completed: purchaseManagerHive.getCompleted(16),
  ),
  CoursesExModel(
    id: 17,
    exerciseName: 'Boolean Comparisons',
    productID: 'com.mrrubik.learnswift.swiftbasicex17',
    alreadyBuy: purchaseManagerHive.getPurchasedTrue(17),
    completed: purchaseManagerHive.getCompleted(17),
  ),
  CoursesExModel(
    id: 18,
    exerciseName: 'Combine Boolean Values',
    productID: 'com.mrrubik.learnswift.swiftbasicex18',
     alreadyBuy: purchaseManagerHive.getPurchasedTrue(18),
    completed: purchaseManagerHive.getCompleted(18),
  ),
  CoursesExModel(
    id: 19,
    exerciseName: 'Logical AND Operator',
    productID: 'com.mrrubik.learnswift.swiftbasicex19',
     alreadyBuy: purchaseManagerHive.getPurchasedTrue(19),
    completed: purchaseManagerHive.getCompleted(19),
  ),
  CoursesExModel(
    id: 20,
    exerciseName: 'Logical OR Operator',
    productID: 'com.mrrubik.learnswift.swiftbasicex20',
    alreadyBuy: purchaseManagerHive.getPurchasedTrue(20),
    completed: purchaseManagerHive.getCompleted(20),
  ),
  CoursesExModel(
    id: 21,
    exerciseName: 'Boolean Negation',
    productID: 'com.mrrubik.learnswift.swiftbasicex21',
    alreadyBuy: purchaseManagerHive.getPurchasedTrue(21),
    completed: purchaseManagerHive.getCompleted(21),
  ),
  CoursesExModel(
    id: 22,
    exerciseName: 'Short-Circuit Eval',
    productID: 'com.mrrubik.learnswift.swiftbasicex22',
   alreadyBuy: purchaseManagerHive.getPurchasedTrue(22),
    completed: purchaseManagerHive.getCompleted(22),
  ),
  CoursesExModel(
    id: 23,
    exerciseName: 'Boolean Conditional Ternary Operator',
    productID: 'com.mrrubik.learnswift.swiftbasicex23',
    alreadyBuy: purchaseManagerHive.getPurchasedFalse(23),
    completed: purchaseManagerHive.getCompleted(23),
  ),
  CoursesExModel(
    id: 24,
    exerciseName: 'Boolean in If-Else Statement',
    productID: 'com.mrrubik.learnswift.swiftbasicex24',
     alreadyBuy: purchaseManagerHive.getPurchasedFalse(24),
    completed: purchaseManagerHive.getCompleted(24),
  ),
  CoursesExModel(
    id: 25,
    exerciseName: 'Boolean with Nested If Statements',
    productID: 'com.mrrubik.learnswift.swiftbasicex25',
      alreadyBuy: purchaseManagerHive.getPurchasedFalse(25),
    completed: purchaseManagerHive.getCompleted(25),
  ),
  CoursesExModel(
    id: 26,
    exerciseName: 'Boolean Logic Challenge: Password Validator',
    productID: 'com.mrrubik.learnswift.swiftbasicex26',
      alreadyBuy: purchaseManagerHive.getPurchasedFalse(26),
    completed: purchaseManagerHive.getCompleted(26),
  ),
  CoursesExModel(
    id: 27,
    exerciseName: 'Boolean Game Logic',
    productID: 'com.mrrubik.learnswift.swiftbasicex27',
      alreadyBuy: purchaseManagerHive.getPurchasedFalse(27),
    completed: purchaseManagerHive.getCompleted(27),
  ),
  CoursesExModel(
    id: 28,
    exerciseName: 'Boolean Quiz App Logic',
    productID: 'com.mrrubik.learnswift.swiftbasicex28',
      alreadyBuy: purchaseManagerHive.getPurchasedFalse(28),
    completed: purchaseManagerHive.getCompleted(28),
  ),
  CoursesExModel(
    id: 29,
    exerciseName: 'Guess the Secret Boolean',
    productID: 'com.mrrubik.learnswift.swiftbasicex29',
     alreadyBuy: purchaseManagerHive.getPurchasedFalse(29),
    completed: purchaseManagerHive.getCompleted(29),
  ),
  CoursesExModel(
    id: 30,
    exerciseName: 'Logical Operators Game',
    productID: 'com.mrrubik.learnswift.swiftbasicex30',
       alreadyBuy: purchaseManagerHive.getPurchasedFalse(30),
    completed: purchaseManagerHive.getCompleted(30),
  ),
];
