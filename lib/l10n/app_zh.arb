{
  "close": "关闭",
  "correctTitle": "正确！🎉",
  "correctContent": "太棒了！您已经正确地在 Swift 中声明了一个变量。\n\n说明：\n1. 使用了关键字 `var` 创建变量。\n2. 变量名可以是任意有效的标识符，例如 `greeting`、`message` 或 `g`。\n3. 为变量赋值时，值必须是双引号括起来的有效字符串（`\"`）。",
  "hint1Title": "提示 1",
  "hint1Content": "使用关键字 `var` 声明变量。例如：\n`var nombreVariable = \"valor\"`。",
  "hint2Title": "提示 2",
  "hint2Content": "确保使用的是直引号（`\"`），而不是弯引号（`“` 或 `”`）。",
  "solutionTitle": "解决方案",
  "solutionContent": "正确的语法是：\n\n`var nombreVariable = \"valor\"`\n\n示例：\n`var greeting = \"Hello, World!\"`\n`var g = \"Swift\"`",
  "tryAgain": "再试一次！({failedAttempts}/3 次尝试)",
  "exerciseInstructionsTitle": "练习说明",
  "exerciseInstructionsContent": "欢迎来到您的第一个 Swift 练习！🎉\n您的任务：声明一个名为 `greeting` 的变量，并将其赋值为 \"Hello, World!\"。\n\n示例：\nvar greeting = \"Hello, World!\"\n\n提示：使用关键字 `var` 声明变量。",
  "enterYourCodeHere": "在此输入您的代码",
  "varKeyword": "var",
  "exercise2InstructionsContent": "欢迎来到 Swift 的第二个练习！🎉\n\n任务：\n1. 声明一个名为 `number` 的变量，并将其赋值为 5。\n2. 更新 `number` 的值并加上一个数字。\n\n示例：\nvar number = 5\nnumber = number + 10",
  "exercise2CorrectContent": "太棒了！您已经正确地声明并更新了 Swift 中的变量。\n\n说明：\n1. 声明了一个名为 `number` 的变量，并赋予初始值 5。\n2. 然后，通过加上一个数字更新了它的值。\n\n这表明变量可以在 Swift 中声明和修改。",
  "exercise2Hint1Content": "使用关键字 `var` 声明变量。赋一个初始值，例如：`var number = 5`。",
  "exercise2Hint2Content": "在声明变量后，通过加上一个数字来更新其值，例如：`number = number + 10`。",
  "exercise2SolutionContent": "正确答案是：\n\nvar number = 5;\nnumber = number + 10;",
  "exercise3InstructionsContent": "欢迎来到 Swift 的第三个练习！🎉\n\n任务：\n1. 使用函数 `print()` 在控制台显示一条消息。\n2. 在括号内输入您希望显示的任何消息。\n\n提示：确保您的文本用双引号括起来，并遵循格式 `print(\"消息内容\")`。",
  "exercise3CorrectContent": "做得好！您正确地使用了 `print()` 函数。\n\n说明：\n函数 `print()` 可让您在控制台显示任何消息。例如：\n- print(\"Swift 很有趣！\")\n- print(\"你好，世界！\")\n请随意尝试不同的消息。",
  "exercise3SolutionContent": "正确的答案是任何有效使用 `print()` 的代码。例如：\n\nprint(\"Swift 很有趣！\")\nprint(\"学习很棒！\")",
  "exercise4InstructionsContent": "欢迎来到 Swift 的另一个练习！🎉\n\n任务：声明变量并进行算术运算。\n示例：\nvar a = 5\nvar b = a\nvar sum = a + b\nprint(sum)",
  "exercise4CorrectContent": "太棒了！您正确地声明了变量并完成了算术运算。\n\n说明：\n1. 使用了关键字 `var` 声明变量。\n2. 为变量赋值，包括一个依赖于另一个变量的值。\n3. 进行了算术运算（`a + b`），并将结果存储在新的变量 `sum` 中。\n4. 最后，使用 `print(sum)` 在控制台显示了结果。\n\n理解如何声明变量和使用算术运算是编程的基本步骤。",
  "exercise4Hint1Content": "记住使用关键字 `var` 声明变量并为其赋值。",
  "exercise4Hint2Content": "考虑使用另一个变量的值为变量赋值，例如 `var b = a`。",
  "exercise4Hint3Content": "按以下结构组织代码：\n1. 声明两个变量。\n2. 将它们相加。\n3. 显示结果。",
  "hint3Title": "提示 3",
  "exercise5InstructionsContent": "欢迎来到这个 Swift 练习！🎉\n\n您的任务：声明一个变量并使用字符串插值。\n示例：\nvar name = \"Juan\"\nprint(\"你好，我的名字是 \\(name)！\")",
  "exercise5CorrectContent": "做得好！您正确地使用了 Swift 的字符串插值。\n\n说明：\n1. 声明了一个变量 `name` 并赋值。\n2. 使用了 `print()` 函数来显示消息。\n3. 在 `print()` 中，利用字符串插值（`\\(name)`）将变量 `name` 包含在文本中。\n\n字符串插值使您可以动态地将变量和文本结合在一起，从而使代码更强大和富有表现力。",
  "exercise5Hint1Content": "记住使用关键字 `var` 声明变量并赋值（例如，var name = \"Juan\"）。",
  "exercise5Hint2Content": "使用字符串插值将变量和文本结合在 `print()` 中。例如：print(\"你好，我的名字是 \\(name)！\")。",
  "exercise5Hint3Content": "按以下结构编写代码：\n1. 声明一个变量 `name` 并赋值。\n2. 使用字符串插值将 `name` 包含在消息中，使用 `print()`。",
  "exercise6InstructionsContent": "欢迎来到这个 Swift 练习！🎉\n\n您的任务：计算一个矩形的面积。\n1. 声明变量 `length` 和 `width`。\n2. 将它们相乘以计算面积。\n3. 使用 `print()` 显示结果。\n\n示例：\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
  "exercise6CorrectContent": "做得好！您正确地计算了矩形的面积。\n\n说明：\n1. 使用 `var length` 和 `var width` 声明了矩形的尺寸。\n2. 通过将它们相乘得到了 `area`。\n3. 使用 `print(area)` 显示结果。",
  "exercise6Hint1Content": "记住使用关键字 `var` 声明变量。",
  "exercise6Hint2Content": "使用 `length * width` 来计算面积。",
  "exercise6Hint3Content": "以下是正确的结构：\n1. 声明两个变量来表示 `length` 和 `width`。\n2. 将它们相乘以计算 `area`。\n3. 打印结果。",
  "exercise6SolutionContent": "正确答案是：\n\nvar length = 5\nvar width = 10\nvar area = length * width\nprint(area)",
  "exercise7InstructionsContent": "您的任务：使用字符串连接组合两个字符串。\n\n示例：\nvar firstName = \"Juan\"\nvar lastName = \"Pérez\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
  "exercise7CorrectContent": "做得好！您正确地在 Swift 中连接了字符串。\n\n说明：\n1. 声明了两个 `String` 类型的变量。\n2. 使用了 `+` 运算符将它们连接起来。\n3. 最后，使用 `print()` 显示组合后的字符串。",
  "exercise7Hint1Content": "使用 `+` 运算符来连接字符串。",
  "exercise7Hint2Content": "连接字符串时包括一个空格。",
  "exercise7SolutionContent": "正确答案是：\n\nvar firstName = \"Juan\"\nvar lastName = \"Pérez\"\nvar fullName = firstName + \" \" + lastName\nprint(fullName)",
  "exercise8InstructionsContent": "您的任务：声明不同类型的变量（`Int`、`Double`、`String`、`Bool`），并打印它们。\n\n示例：\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)",
  "exercise8CorrectContent": "太棒了！您在 Swift 中正确地声明了不同类型的变量。\n\n说明：\n1. `Int` 用于整数。\n2. `Double` 用于小数。\n3. `String` 用于文本。\n4. `Bool` 用于布尔值（真/假）。\n5. `print()` 显示变量的值。",
  "exercise8Hint1Content": "确保为每个变量指定类型。例如：`var age: Int = 25`。",
  "exercise8Hint2Content": "记住使用 `print(variableName)` 打印所有变量。",
  "exercise8SolutionContent": "正确答案是：\n\nvar age: Int = 25\nvar height: Double = 1.75\nvar name: String = \"Alice\"\nvar isStudent: Bool = true\nprint(age)\nprint(height)\nprint(name)\nprint(isStudent)",
  "exercise10Hint2Content": "通过索引访问数组中的元素。记住，索引从 0 开始。",
  "exercise10SolutionContent": "正确答案是：\n\nvar numbers = [1, 2, 3]\nprint(numbers[0])\nprint(numbers[2])",
  "exercise11InstructionsContent": "您的任务：创建并调用一个函数来打印消息。\n\n示例：\nfunc greet() @\n    print(\"你好，世界！\")\n&\ngreet()",
  "exercise11CorrectContent": "太棒了！您已经在 Swift 中创建并调用了一个函数。\n\n说明：\n1. 使用关键字 `func` 声明了一个函数。\n2. 在函数内部，使用 `print()` 来显示消息。\n3. 最后，使用函数名加上 `()` 来调用函数。",
  "exercise11Hint1Content": "从使用关键字 `func` 声明一个函数开始。",
  "exercise11Hint2Content": "在函数内部，使用 `print()` 来显示一条消息。",
  "exercise11SolutionContent": "正确答案是：\n\nfunc greet() @\n    print(\"你好，世界！\")\n&\ngreet()",
  "exercise12InstructionsContent": "您的任务：执行基本的算术操作。\n\n示例：\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)",
  "exercise12CorrectContent": "太棒了！您在 Swift 中正确地完成了算术操作。\n\n说明：\n1. 为数字声明了变量。\n2. 完成了加、减、乘和除运算。\n3. 在控制台打印了结果。",
  "exercise12Hint1Content": "从使用关键字 `var` 声明两个变量开始。",
  "exercise12Hint2Content": "使用 `+`、`-`、`*` 和 `/` 来执行算术操作。",
  "exercise12SolutionContent": "正确答案是：\n\nvar x = 10\nvar y = 5\nvar sum = x + y\nprint(sum)\nvar difference = x - y\nprint(difference)\nvar product = x * y\nprint(product)\nvar quotient = x / y\nprint(quotient)",
  "exercise13InstructionsContent": "您的任务：声明常量并打印它们的值。\n\n示例：\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)",
  "exercise13CorrectContent": "太棒了！您在 Swift 中正确地声明了常量。\n\n说明：\n1. 使用 `let` 声明了常量。\n2. 为常量赋予了不同类型的值（数字、字符串、布尔值）。\n3. 使用 `print()` 打印了它们的值。",
  "exercise13Hint1Content": "从使用关键字 `let` 声明常量开始。",
  "exercise13Hint2Content": "为常量赋予不同类型的值（例如，一个数字，一个字符串，一个布尔值）。",
  "exercise13SolutionContent": "正确答案是：\n\nlet pi = 3.14159\nlet name = \"John\"\nlet isActive = true\nprint(pi)\nprint(name)\nprint(isActive)",
  "exercise14InstructionsContent": "结合概念：创建一个用于 pi 的常量，编写一个函数来计算圆的面积，使用一个数组存储半径并打印结果。",
  "exercise14CorrectContent": "太棒了！您结合了 Swift 的多个概念。\n\n说明：\n1. 声明了一个常量来表示 pi 的值。\n2. 创建了一个函数来计算圆的面积。\n3. 使用了一个数组存储半径。\n4. 将计算出的面积存储在一个新的数组中，并打印了结果。",
  "exercise14Hint1Content": "使用 `let` 声明一个表示 pi 的常量。",
  "exercise14Hint2Content": "编写一个函数，使用给定的半径计算圆的面积。",
  "exercise14SolutionContent": "正确答案是：\n\nlet pi = 3.14159\nfunc calculateCircleArea(radius: Double) -> Double @\n    return pi * radius * radius\n&\nlet radii = [3.0, 4.5, 6.7]\nvar areas = [Double]()\nfor radius in radii @\n    areas.append(calculateCircleArea(radius: radius))\n&\nprint(areas)",
  "exercise15InstructionsContent": "编写两个函数来转换温度：从摄氏度到华氏度，以及从华氏度到摄氏度。使用常量存储温度并打印结果。",
  "exercise15CorrectContent": "很棒！您已经创建了一个温度转换器。\n\n说明：\n1. 定义了用于从摄氏度转换到华氏度以及从华氏度转换到摄氏度的函数。\n2. 声明了初始温度的常量。\n3. 打印了转换结果。",
  "exercise15Hint1Content": "定义一个从摄氏度到华氏度的函数，使用公式 `(Celsius * 9 / 5) + 32`。",
  "exercise15Hint2Content": "定义一个从华氏度到摄氏度的函数，使用公式 `(Fahrenheit - 32) * 5 / 9`。",
  "exercise15SolutionContent": "正确答案是：\n\nfunc convertToFahrenheit(celsius: Double) -> Double @\n    return (celsius * 9 / 5) + 32\n&\nfunc convertToCelsius(fahrenheit: Double) -> Double @\n    return (fahrenheit - 32) * 5 / 9\n&\nlet tempInCelsius = 25.0\nlet tempInFahrenheit = 77.0\nprint(convertToFahrenheit(celsius: tempInCelsius))\nprint(convertToCelsius(fahrenheit: tempInFahrenheit))",
  "exercise3Hint1Content": "记住使用 `print()` 函数在控制台打印消息。\n\n例如：\n```swift\nprint(\"你好，世界！\")\n```",
  "exercise3Hint2Content": "确保您的消息在双引号内。\n\n示例：\n```swift\nprint(\"Swift 很有趣！\")\n```",
  "unlockExerciseTitle": "解锁练习？",
  "unlockExerciseContent": "您是否希望解锁练习 \"{exerciseName}\"？可以通过以下方式完成：",
  "cancel": "取消",
  "buyExercise": "购买此练习",
  "buyAllExercises": "解锁所有练习",
  "restorePurchases": "恢复购买",
  "@unlockExerciseContent": {
    "description": "提示用户是否希望解锁特定练习的消息",
    "placeholders": {
      "exerciseName": {
        "type": "String",
        "example": "你好世界"
      }
    }
  },
  "purchaseUnavailable": "目前无法进行购买。",
  "purchaseInitiated": "购买已开始。",
  "productNotFound": "未找到产品。",
  "restoreSuccess": "购买恢复成功！",
  "restoreError": "恢复期间发生错误。",
  "noPurchasesToRestore": "没有可恢复的购买。",
  "unexpectedRestoreError": "恢复期间发生意外错误。",
  "exercise151InstructionsContent": "欢迎来到 Boolean 的基础概念！🎉\n\n您的任务：\n1. 使用关键字 `var` 声明一个布尔类型的变量。\n2. 为其赋值 `true` 或 `false`。\n\n示例：\n```swift\nvar isSwiftFun = true\n```",
  "exercise151SolutionContent": "正确答案是：\n\n```swift\nvar isSwiftFun = true\n```",
  "exercise151Hint1Title": "提示 1",
  "exercise151Hint1Content": "使用关键字 `var` 声明一个变量。为其赋值一个布尔值，比如 `true` 或 `false`。",
  "exercise15Hint2Title": "提示 2",
  "exercise151Hint2Content": "一个正确的示例是：\n```swift\nvar isSwiftFun = true\n```",
  "booleanExplanation": "太棒了！您使用逻辑运算符正确地组合了布尔变量。\n\n说明：\n- 运算符 `&&` 检查两个条件是否都为真。\n- 运算符 `||` 检查是否至少有一个条件为真。\n\n使用这些运算符可以根据多个条件做出决策。",
  "hint1Boolean": "从声明两个布尔变量开始：`var isSunny = true` 和 `var isWeekend = false`。",
  "hint2Boolean": "使用运算符 `&&` 检查两个条件是否都为真。例如：`var goToBeach = isSunny && isWeekend`。",
  "exerciseInstructionsBoolean": "欢迎来到布尔运算！🎉\n\n您的任务：\n1. 声明两个布尔变量：`isSunny` 和 `isWeekend`。\n2. 使用 `&&` 或 `||` 将它们组合，并将结果赋值给 `goToBeach`。\n3. 打印结果。",
  "exercise16SolutionContent": "正确答案是：\n\n```swift\nvar isSunny = true;\nvar isWeekend = false;\nvar goToBeach = isSunny && isWeekend;\nprint(goToBeach);\n```",
  "example": "示例",
  "booleanComparisonExplanation": "太棒了！您在 Swift 中正确地使用了布尔比较。\n\n说明：\n- `!isHot` 检查 `isHot` 是否为 `false`。\n- `!isCold` 检查 `isCold` 是否为 `false`。\n- 将这些条件与 `&&` 结合起来可以判断环境是否舒适。\n\n此练习展示了如何使用逻辑运算符进行复杂条件的评估。",
  "hint1BooleanComparison": "声明两个布尔变量：`isHot` 和 `isCold`。为它们赋值 `true` 或 `false`。",
  "hint2BooleanComparison": "使用运算符 `!` 来反转布尔值，例如，`!isHot` 检查 `isHot` 是否为 `false`。",
  "exerciseInstructionsBooleanComparison": "欢迎来到布尔比较！🎉\n\n您的任务：\n1. 声明两个布尔变量：`isHot` 和 `isCold`。\n2. 使用运算符 `!` 和 `&&` 将它们组合，确定 `isComfortable` 是否为 `true`。\n3. 打印结果。",
  "exercise17SolutionContent": "正确答案是：\n\n```swift\nvar isHot = false;\nvar isCold = false;\nvar isComfortable = !isHot && !isCold;\nprint(isComfortable);\n```",
  "booleanWalkingExplanation": "太棒了！您在 Swift 中正确地使用了逻辑运算符组合布尔值。\n\n说明：\n- `isSunny` 检查是否晴天。\n- `hasUmbrella` 检查是否有雨伞。\n- `canGoWalking` 使用运算符 `||` 组合这两个值，以决定是否可以外出散步。\n\n示例：\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking) // true\n```",
  "hint1BooleanWalking": "使用关键字 `var` 声明变量。赋值布尔值，比如 `true` 或 `false`。",
  "hint2BooleanWalking": "使用运算符 `||` 组合布尔值。例如：\n```swift\nvar canGoWalking = isSunny || hasUmbrella\n```",
  "exerciseInstructionsBooleanWalking": "欢迎使用布尔运算符！🎉\n\n您的任务：\n1. 声明两个布尔变量：`isSunny` 和 `hasUmbrella`。\n2. 使用运算符 `||` 组合它们，以决定是否可以外出散步。\n\n示例：\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```",
  "exercise18SolutionContent": "正确答案是：\n\n```swift\nvar isSunny = true\nvar hasUmbrella = false\nvar canGoWalking = isSunny || hasUmbrella\nprint(canGoWalking)\n```",
  "logicalOperatorsExplanation": "太棒了！您正确地使用了逻辑运算符来判断是否可以外出。\n\n说明：\n- `isRaining` 检查是否在下雨。\n- `haveUmbrella` 检查是否有雨伞。\n- `canGoOutside` 使用运算符 `||` 组合这些值，以确定是否可以外出。\n\n示例：\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\nprint(canGoOutside)\n```",
  "hint1LogicalOperators": "声明两个变量：`isRaining` 和 `haveUmbrella`。为它们赋值布尔值，比如 `true` 或 `false`。",
  "hint2LogicalOperators": "使用逻辑运算符 `&&` 和 `||` 组合变量。",
  "exerciseInstructionsLogicalOperators": "欢迎来到逻辑运算符练习！🎉\n\n您的任务：\n1. 声明两个布尔变量：`isRaining` 和 `haveUmbrella`。\n2. 使用运算符 `||` 决定是否可以外出。\n\n示例：\n```swift\nvar isRaining = true\nvar haveUmbrella = true\nvar canGoOutside = !isRaining || haveUmbrella\n```",
  "exercise19SolutionContent": "正确答案是：\n\n```swift\nvar isRaining = true;\nvar haveUmbrella = true;\nvar canGoOutside = !isRaining || haveUmbrella;\nprint(canGoOutside);\n```",
  "logicalOrExplanation": "太棒了！您在 Swift 中正确地使用了逻辑 OR 运算符。\n\n说明：\n- 运算符 `||` 如果 **任意一个** 条件为真，就返回 `true`。\n- 示例：`let isSunny = true || false` 的计算结果是 `true`，因为其中一个条件为真。",
  "hint1LogicalOr": "使用运算符 `||` 来检查 **任意两个** 条件是否为真。",
  "hint2LogicalOr": "示例语法：\n```swift\nlet isSunny = true || false\n```",
  "exerciseInstructionsLogicalOr": "欢迎学习逻辑 OR 运算符的基础知识！🎉\n\n您的任务：\n1. 使用关键字 `let` 声明一个常量。\n2. 为其赋值一个使用逻辑 OR (`||`) 的表达式。\n\n示例：\n```swift\nlet isSunny = true || false\n```",
  "exercise20SolutionContent": "正确答案是：\n\n```swift\nlet isSunny = true || false\n```",
  "booleanNegationExplanation": "太棒了！你正确使用了 Swift 中的布尔取反运算符。\n\n说明：\n- 运算符 `!` 用于取反布尔值。例如，如果 `isSwiftFun` 是 `true`，那么 `!isSwiftFun` 会变成 `false`。",
  "hint1BooleanNegation": "使用 `var` 关键字声明两个变量。为一个变量赋布尔值，为另一个变量赋第一个变量的取反值。",
  "hint2BooleanNegation": "正确示例：\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exerciseInstructionsBooleanNegation": "欢迎学习布尔取反！🎉\n\n你的任务：\n1. 使用 `var` 关键字声明一个布尔变量。\n2. 声明另一个变量，并将第一个变量的取反值赋给它。\n\n示例：\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "exercise21SolutionContent": "正确的解决方案：\n\n```swift\nvar isSwiftFun = true\nvar notSwiftFun = !isSwiftFun\n```",
  "booleanShortCircuitExplanation": "太棒了！你已经成功完成了 Swift 中的布尔短路求值练习。\n\n说明：\n- 运算符 `||` 如果第一个条件为 `true`，不会评估第二个条件。\n- 运算符 `&&` 只有在两个条件都为 `true` 时才会返回 `true`。",
  "hint1BooleanShortCircuit": "尝试使用 `||` 运算符进行“或”操作，使用 `&&` 运算符进行“与”操作。",
  "hint2BooleanShortCircuit": "记住：`||` 先评估第一个条件，而 `&&` 要两个条件都为真。",
  "exerciseInstructionsBooleanShortCircuit": "欢迎学习布尔短路求值！🎉\n\n你的任务：\n1. 使用 `var` 关键字声明一个变量。\n2. 使用 `||`（或）和 `&&`（与）运算符创建布尔表达式。\n\n示例：\n```swift\nvar result = (true || false) && true\n```",
  "exercise22SolutionContent": "正确的解决方案：\n\n```swift\nvar result = (true || false) && true\n```",
  "ternaryOperatorExplanation": "太棒了！你正确使用了 Swift 中的三元条件运算符。\n\n说明：\n- 三元运算符 `? :` 允许你根据条件选择两个值之一。\n- 示例：\n```swift\nvar message = (true ? \"Swift 很棒！\" : \"Swift 还可以\")\n```\n因为条件为 `true`，所以 `message` 的值为 \"Swift 很棒！\"。",
  "hint1TernaryOperator": "使用三元运算符 `? :` 根据条件选择两个值之一。",
  "hint2TernaryOperator": "正确示例：\n```swift\nvar message = (true ? \"Swift 很棒！\" : \"Swift 还可以\")\n```",
  "exerciseInstructionsTernaryOperator": "欢迎学习三元条件运算符！🎉\n\n你的任务：\n1. 使用 `var` 关键字声明一个变量。\n2. 使用三元运算符 `? :` 根据布尔条件为变量赋值。\n\n示例：\n```swift\nvar message = (true ? \"Swift 很棒！\" : \"Swift 还可以\")\n```",
  "exercise23SolutionContent": "正确的解决方案：\n\n```swift\nvar message = (true ? \"Swift 很棒！\" : \"Swift 还可以\")\n```",
  "ifElseExplanation": "太棒了！你正确使用了布尔值与 `if-else` 语句。\n\n说明：\n- 布尔变量可用于条件语句以控制程序流。\n- 示例：\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift 很棒！\")\n& else @\n  print(\"继续努力！\")\n&\n```",
  "hint1IfElse": "使用 `var` 声明布尔变量。在 `if-else` 语句中使用它控制输出。",
  "hint2IfElse": "正确示例：\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift 很棒！\")\n& else @\n  print(\"继续努力！\")\n&\n```",
  "exerciseInstructionsIfElse": "欢迎学习布尔值与 If-Else 语句！🎉\n\n你的任务：\n1. 使用 `var` 关键字声明一个布尔变量。\n2. 使用 `if-else` 语句根据布尔值输出不同的消息。\n\n示例：\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift 很棒！\")\n& else @\n  print(\"继续努力！\")\n&\n```",
  "exercise24SolutionContent": "正确的解决方案：\n\n```swift\nvar isLearningFun = true\nif isLearningFun @\n  print(\"Swift 很棒！\")\n& else @\n  print(\"继续努力！\")\n&\n```",
  "nestedIfExplanation": "太棒了！你正确使用了嵌套 `if` 语句与布尔值。\n\n说明：\n- 本练习展示如何使用嵌套 `if` 语句处理多个条件。\n- 示例：\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"你成功了！\")\n  & else @\n    print(\"差一点成功！\")\n  &\n& else @\n  print(\"请再试一次！\")\n&\n```",
  "hint1NestedIf": "使用 `var` 声明两个布尔变量。使用嵌套的 `if` 语句检查条件。",
  "hint2NestedIf": "正确示例：\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"你成功了！\")\n  & else @\n    print(\"差一点成功！\")\n  &\n& else @\n  print(\"请再试一次！\")\n&\n```",
  "exerciseInstructionsNestedIf": "欢迎学习嵌套 If 语句与布尔值！🎉\n\n你的任务：\n1. 使用 `var` 关键字声明两个布尔变量。\n2. 使用嵌套的 `if` 语句检查两个条件。\n\n示例：\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"你成功了！\")\n  & else @\n    print(\"差一点成功！\")\n  &\n& else @\n  print(\"请再试一次！\")\n&\n```",
  "exercise25SolutionContent": "正确的解决方案：\n\n```swift\nvar firstCondition = true\nvar secondCondition = false\nif firstCondition @\n  if secondCondition @\n    print(\"你成功了！\")\n  & else @\n    print(\"差一点成功！\")\n  &\n& else @\n  print(\"请再试一次！\")\n&\n```",
  "passwordValidatorExplanation": "太棒了！你已经成功使用布尔值创建了一个密码验证器。\n\n说明：\n- 本练习结合了字符串操作和布尔逻辑。\n- 一个安全的密码应满足以下条件：\n  1. 至少包含 8 个字符。\n  2. 包含符号 `@`。\n  3. 包含符号 `$`。\n\n示例解决方案：\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"密码安全！\");\n> else <\n  print(\"密码不安全。\");\n>",
  "hint1PasswordValidator": "声明一个名为 `password` 的变量，并赋予一个字符串值。使用 `.contains` 检查是否包含符号 `@` 和 `$`。",
  "hint2PasswordValidator": "使用 `&&` 运算符组合条件：\n例如：`if password.contains(\"@\") && password.contains(\"$\")`。",
  "passwordValidatorInstructions": "欢迎来到密码验证挑战！🎉\n\n你的任务：\n1. 声明一个名为 `password` 的变量，并赋予一个字符串值。\n2. 使用 `if` 语句检查密码是否：\n   - 至少包含 8 个字符。\n   - 包含符号 `@`。\n   - 包含符号 `$`。\n3. 如果密码符合所有条件，打印 `密码安全！`。否则，打印 `密码不安全。`。",
  "exercise26SolutionContent": "正确的解决方案：\n\nvar password = \"@StrongPass$\";\nif password.contains(\"@\") && password.contains(\"$\") <\n  print(\"密码安全！\");\n> else <\n  print(\"密码不安全。\");\n>",
  "gameLogicExplanation": "太棒了！你已经成功实现了一个使用布尔值和条件的游戏逻辑。\n\n说明：\n- 你声明了变量 `isAlive` 和 `health`。\n- 使用了一个常量 `damage` 来减少健康值。\n- 检查健康值是否小于或等于 0 来决定游戏是否结束。",
  "hint1GameLogic": "声明变量 `isAlive`、`health` 和常量 `damage`。使用 `if` 检查健康值。",
  "hint2GameLogic": "记住使用：\n- `health -= damage` 来减少健康值。\n- `if (health <= 0)` 检查游戏结束条件。",
  "gameLogicInstructions": "欢迎来到布尔值游戏逻辑挑战！🎮\n\n你的任务：\n1. 声明 `isAlive` 为 `true`。\n2. 声明 `health` 为 `100`。\n3. 从 `health` 中减去 `damage`。\n4. 如果 `health <= 0`，打印 `Game Over`。否则，打印 `Keep Playing!`。\n\n示例：\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\nº else #\n  print(\"Keep Playing!\");\nº",
  "exercise27SolutionContent": "正确的解决方案：\n\nvar isAlive = true;\nvar health = 100;\nlet damage = 30;\nhealth -= damage;\nif (health <= 0) #\n  print(\"Game Over\");\nº else #\n  print(\"Keep Playing!\");\n",
  "quizLogicExplanation": "太棒了！你已经成功实现了一个使用布尔值和条件的测验逻辑。\n\n说明：\n- `isAnswerCorrect` 是一个布尔常量，存储了用户的回答。\n- 一个 `if` 条件语句检查其值并显示相应的消息。",
  "hint1QuizLogic": "使用一个布尔常量 `isAnswerCorrect`。编写一个 `if` 条件语句来检查其值。",
  "hint2QuizLogic": "一个正确的示例是：\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"答案正确！🎉\");\nº else #\n  print(\"再试一次！\");\nº",
  "quizLogicInstructions": "欢迎来到测验逻辑挑战！🧠\n\n你的任务：\n1. 声明一个布尔常量 `isAnswerCorrect`。\n2. 编写一个 `if-else` 结构来检查答案是否正确。\n3. 如果正确，打印 `答案正确！🎉`。否则，打印 `再试一次！`。",
  "exercise28SolutionContent": "正确的解决方案：\n\nlet isAnswerCorrect = true;\nif (isAnswerCorrect) #\n  print(\"答案正确！🎉\");\nº else #\n  print(\"再试一次！\");\nº",
  "booleanGuessExplanation": "太棒了！你已经成功实现了一个使用布尔值的猜谜游戏。\n\n说明：\n- `secretBoolean` 包含一个隐藏值。\n- 用户使用运算符 `==` 将自己的猜测与该值进行比较。\n- 根据比较结果显示相应的消息。",
  "hint1BooleanGuess": "使用一个布尔常量 `secretBoolean`。声明另一个常量 `userGuess`，并使用 `==` 比较两者。",
  "hint2BooleanGuess": "一个正确的示例是：\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"正确！🎉\");\nº else #\n  print(\"错误。请再试一次。\");\nº\n```",
  "booleanGuessInstructions": "欢迎来到布尔猜谜挑战！🧠\n\n你的任务：\n1. 声明一个布尔常量 `secretBoolean`。\n2. 声明一个表示用户输入的常量 `userGuess`。\n3. 使用运算符 `==` 比较两者。\n4. 如果猜测正确，打印 `正确！🎉`；否则，打印 `错误。请再试一次。`",
  "exercise29SolutionContent": "正确的解决方案：\n\n```swift\nlet secretBoolean = true;\nlet userGuess = true;\nif (userGuess == secretBoolean) #\n  print(\"正确！🎉\");\nº else #\n  print(\"错误。请再试一次。\");\nº\n```",
  "booleanLogicExplanation": "太棒了！你已经成功使用逻辑运算符来评估条件。\n\n说明：\n- `isUserLoggedIn` 和 `hasPremiumAccess` 是布尔常量。\n- 使用运算符 `&&` (AND) 检查它们是否都为真。\n- 根据评估结果打印相应的消息。",
  "hint1BooleanLogic": "使用两个布尔常量 `isUserLoggedIn` 和 `hasPremiumAccess`。\n使用运算符 `&&` 检查两个条件。",
  "hint2BooleanLogic": "一个正确的示例是：\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"已获得高级功能访问权限！\");\nº else #\n  print(\"访问被拒绝。请登录或升级账户。\");\nº\n```",
  "booleanLogicInstructions": "欢迎来到逻辑运算符游戏！🧠\n\n你的任务：\n1. 声明两个常量：`isUserLoggedIn` 和 `hasPremiumAccess`。\n2. 使用运算符 `&&` 检查两个条件是否都为真。\n3. 如果条件成立，打印 `已获得高级功能访问权限！`。\n4. 否则，打印 `访问被拒绝。请登录或升级账户。`",
  "exercise30SolutionContent": "正确的解决方案：\n\n```swift\nlet isUserLoggedIn = true;\nlet hasPremiumAccess = false;\nif (isUserLoggedIn && hasPremiumAccess) #\n  print(\"已获得高级功能访问权限！\");\nº else #\n  print(\"访问被拒绝。请登录或升级账户。\");\nº\n```",
  "exercise31IntroTitle": "练习说明",
  "exercise31IntroContent": "欢迎来到 If-Else 的基础！🎉\n\n你的任务：\n1. 声明一个变量 `score` 并赋值。\n2. 使用一个 `if` 块检查条件（例如，如果分数大于 70）。\n3. 如果条件为真，打印 `通过`；否则打印 `未通过`。",
  "exercise31CorrectTitle": "正确！🎉",
  "exercise31CorrectContent": "太棒了！你已经成功在 Swift 中使用了 if-else 声明。\n\n说明：\n- 当条件为真时，执行 `if` 块。\n- 当条件为假时，执行 `else` 块。\n\n这允许你根据条件在代码中做出决策。",
  "exercise31Hint1Title": "提示 1",
  "exercise31Hint1Content": "首先声明一个变量，例如：`var score = 80`。使用一个 `if` 块检查值。",
  "exercise31Hint2Title": "提示 2",
  "exercise31Hint2Content": "一个示例结构可能是：\n```swift\nif (score > 70) #\n  print(\"通过\");\nº else #\n  print(\"未通过\");\nº```",
  "exercise31SolutionTitle": "解决方案",
  "exercise31SolutionContent": "正确的解决方案是：\n```swift\nvar score = 80;\nif (score > 70) #\n  print(\"通过\");\nº else #\n  print(\"未通过\");\nº```",
  "exercise31Example": "示例：\n1  var score = 80;\n2  if (score > 70) #\n3      print(\"通过\");\n4  º else #\n5      print(\"未通过\");\n6  º",
  "exercise31Hint": "在此输入你的代码",
  "exercise32IntroTitle": "练习说明",
  "exercise32IntroContent": "欢迎来到 If-Else 多条件判断！🎉\n\n你的任务：\n1. 声明一个变量 `temperature` 并赋值。\n2. 使用 `if` 检查是否大于等于 30 并打印 '很热'。\n3. 使用 `else if` 检查是否小于 15 并打印 '很冷'。\n4. 使用 `else` 处理其他所有情况并打印 '温暖'。",
  "exercise32CorrectTitle": "正确！🎉",
  "exercise32CorrectContent": "太棒了！你已经在 Swift 中正确使用了多条件的 if-else。\n\n说明：\n- `if` 用于第一个条件。\n- `else if` 用于附加检查。\n- `else` 处理所有其他情况。\n\n这种结构对于检查多种可能性非常有用。",
  "exercise32Hint1Title": "提示 1",
  "exercise32Hint1Content": "首先声明一个变量，例如：`var temperature = 25`。使用 `if` 检查它的值。",
  "exercise32Hint2Title": "提示 2",
  "exercise32Hint2Content": "一个示例结构可能是：\n```swift\nif (temperature >= 30) #\n  print(\"很热\");\nº else if (temperature < 15) #\n  print(\"很冷\");\nº else #\n  print(\"温暖\");\nº```",
  "exercise32SolutionTitle": "解决方案",
  "exercise32SolutionContent": "正确的解决方案是：\n```swift\nvar temperature = 25;\nif (temperature >= 30) #\n  print(\"很热\");\nº else if (temperature < 15) #\n  print(\"很冷\");\nº else #\n  print(\"温暖\");\nº```",
  "exercise32Example": "示例：\n1  var temperature = 25;\n2  if (temperature >= 30) #\n3      print(\"很热\");\n4  º else if (temperature < 15) #\n5      print(\"很冷\");\n6  º else #\n7      print(\"温暖\");\n8  º",
  "exercise32Hint": "在此输入你的代码",
  "exercise33IntroTitle": "练习说明",
  "exercise33IntroContent": "欢迎来到 If-Else 等值比较！🎉\n\n你的任务：\n1. 声明一个变量 `password` 并赋值为 \"swift\"。\n2. 使用 `if` 判断 `password` 是否等于 \"swift\"。\n3. 如果为真，打印 \"访问已授权\"；否则打印 \"访问被拒绝\"。",
  "exercise33CorrectTitle": "正确！🎉",
  "exercise33CorrectContent": "太棒了！你已经在 Swift 中正确使用了 if-else 的等值比较。\n\n说明：\n- 使用 `==` 检查两个值是否相等。\n- 如果相等，执行 `if` 块。\n- 否则，执行 `else` 块。\n\n这是程序中决策的关键技能。",
  "exercise33Hint1Title": "提示 1",
  "exercise33Hint1Content": "首先声明一个变量，例如：`var password = \"swift\"`。然后使用 `if` 检查是否等于 \"swift\"。",
  "exercise33Hint2Title": "提示 2",
  "exercise33Hint2Content": "将代码结构化如下：\n```swift\nif (password == \"swift\") #\n  print(\"访问已授权\");\nº else #\n  print(\"访问被拒绝\");\nº```",
  "exercise33SolutionTitle": "解决方案",
  "exercise33SolutionContent": "正确的解决方案是：\n```swift\nvar password = \"swift\";\nif (password == \"swift\") #\n  print(\"访问已授权\");\nº else #\n  print(\"访问被拒绝\");\nº```",
  "exercise33Example": "示例：\n1  var password = \"swift\";\n2  if (password == \"swift\") #\n3      print(\"访问已授权\");\n4  º else #\n5      print(\"访问被拒绝\");\n6  º",
  "exercise33Hint": "在此输入你的代码",
  "exercise34IntroTitle": "练习说明",
  "exercise34IntroContent": "欢迎来到 If-Else 与比较运算符！🎉\n\n你的任务：\n1. 声明一个变量 `age` 并赋值为一个数字。\n2. 使用 `if` 判断 `age >= 18`。\n3. 如果为真，打印 \"你是成年人\"；否则打印 \"你是未成年人\"。",
  "exercise34CorrectTitle": "正确！🎉",
  "exercise34CorrectContent": "太棒了！你已经正确使用了带比较运算符的 `if-else`。\n\n说明：\n- 运算符 `>=` 检查一个值是否大于或等于另一个值。\n- 这在基于数字比较的决策中非常有用。",
  "exercise34Hint1Title": "提示 1",
  "exercise34Hint1Content": "声明一个变量 `age` 并赋值为一个数字，例如：`var age = 16`。然后使用 `if` 判断 `age >= 18`。",
  "exercise34Hint2Title": "提示 2",
  "exercise34Hint2Content": "将代码结构化如下：\n```swift\nif (age >= 18) #\n  print(\"你是成年人\");\nº else #\n  print(\"你是未成年人\");\nº```",
  "exercise34SolutionTitle": "解决方案",
  "exercise34SolutionContent": "正确的解决方案是：\n```swift\nvar age = 16;\nif (age >= 18) #\n  print(\"你是成年人\");\nº else #\n  print(\"你是未成年人\");\nº```",
  "exercise34Example": "示例：\n1  var age = 16;\n2  if (age >= 18) #\n3      print(\"你是成年人\");\n4  º else #\n5      print(\"你是未成年人\");\n6  º",
  "exercise34Hint": "在此输入你的代码",
  "exercise35IntroTitle": "练习说明",
  "exercise35IntroContent": "欢迎来到 If-Else 嵌套介绍！🎉\n\n你的任务：\n1. 声明一个变量 `score` 并赋值为一个数字。\n2. 使用 `if-else` 判断：\n   - `优秀` 对于分数为 90 或以上。\n   - `及格` 对于分数在 60 到 89 之间。\n   - `不及格` 对于分数低于 60。\n3. 打印相应的类别。",
  "exercise35CorrectTitle": "正确！🎉",
  "exercise35CorrectContent": "太棒了！你已经正确使用了嵌套的 `if-else` 结构。\n\n说明：\n- 嵌套的 `if-else` 结构允许按顺序评估多个条件。\n- 在本练习中，程序评估分数并确定相应的类别。",
  "exercise35Hint1Title": "提示 1",
  "exercise35Hint1Content": "首先声明一个变量 `score` 并赋值，例如：`var score = 75`。",
  "exercise35Hint2Title": "提示 2",
  "exercise35Hint2Content": "使用嵌套的 `if-else` 结构来检查分数：\n```swift\nif (score >= 90) #\n  print(\"优秀\");\nº else #\n  if (score >= 60) #\n    print(\"及格\");\n  º else #\n    print(\"不及格\");\n  º\nº```",
  "exercise35SolutionTitle": "解决方案",
  "exercise35SolutionContent": "正确的解决方案是：\n```swift\nvar score = 75;\nif (score >= 90) #\n  print(\"优秀\");\nº else #\n  if (score >= 60) #\n    print(\"及格\");\n  º else #\n    print(\"不及格\");\n  º\nº```",
  "exercise35Example": "示例：\n1  var score = 75;\n2  if (score >= 90) #\n3      print(\"优秀\");\n4  º else #\n5      if (score >= 60) #\n6          print(\"及格\");\n7      º else #\n8          print(\"不及格\");\n9      º\n10  º",
  "exercise35Hint": "在此输入你的代码",
  "exercise36IntroTitle": "练习说明",
  "exercise36IntroContent": "欢迎来到 If-Else 和字符串比较！🎉\n\n你的任务：\n1. 声明一个名为 `fruit` 的变量并赋值为一个字符串。\n2. 使用 `if` 检查字符串是否与某个值匹配，并打印结果。\n3. 使用 `else` 处理其他情况。\n\n示例：\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"这是一个苹果！\");\nº else #\n    print(\"这不是一个苹果！\");\nº```",
  "exercise36CorrectTitle": "正确！🎉",
  "exercise36CorrectContent": "太棒了！你已经正确使用了 `if-else` 来评估字符串条件。\n\n说明：\n- 可以使用运算符 `==` 比较字符串。\n- 使用 `if` 来检查字符串是否与某个特定值匹配。",
  "exercise36Hint1Title": "提示 1",
  "exercise36Hint1Content": "先声明一个变量 `fruit` 并赋值为一个字符串，例如：`var fruit = \"apple\"`。",
  "exercise36Hint2Title": "提示 2",
  "exercise36Hint2Content": "使用 `if-else` 检查值是否满足条件：\n- 如果 `fruit == \"apple\"`，打印 \"这是一个苹果！\"。",
  "exercise36SolutionTitle": "解决方案",
  "exercise36SolutionContent": "正确的解决方案是：\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"这是一个苹果！\");\nº else #\n    print(\"这不是一个苹果！\");\nº```",
  "exercise36Example": "示例：\n```swift\nvar fruit = \"apple\";\nif (fruit == \"apple\") #\n    print(\"这是一个苹果！\");\nº else #\n    print(\"这不是一个苹果！\");\nº```",
  "exercise36Hint": "在此输入你的代码",
  "exercise37IntroTitle": "练习说明",
  "exercise37IntroContent": "欢迎来到数值比较！🎉\n\n你的任务：\n1. 声明一个名为 `temperature` 的变量并赋值为一个数字。\n2. 使用 `if` 检查该值是否大于、小于或等于特定数字。\n3. 使用 `else` 处理其他情况。\n\n示例：\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"天气很热！\");\nº else #\n    print(\"天气很冷！\");\nº```",
  "exercise37CorrectTitle": "正确！🎉",
  "exercise37CorrectContent": "太棒了！你已经正确使用了 `if-else` 比较数值。\n\n说明：\n- 使用 `>`、`<`、`>=` 和 `<=` 等运算符来评估数字。\n- 如果条件为真，`if` 中的代码将执行；否则，`else` 中的代码将执行。",
  "exercise37Hint1Title": "提示 1",
  "exercise37Hint1Content": "先声明一个变量 `temperature` 并赋值为一个数字，例如：`var temperature = 25`。",
  "exercise37Hint2Title": "提示 2",
  "exercise37Hint2Content": "使用 `if` 比较 `temperature` 和另一个数字，例如：`if (temperature > 20) # ... º`。",
  "exercise37SolutionTitle": "解决方案",
  "exercise37SolutionContent": "正确的解决方案是：\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"天气很热！\");\nº else #\n    print(\"天气很冷！\");\nº```",
  "exercise37Example": "示例：\n```swift\nvar temperature = 25;\nif (temperature > 20) #\n    print(\"天气很热！\");\nº else #\n    print(\"天气很冷！\");\nº```",
  "exercise37Hint": "在此输入你的代码",
  "exercise38IntroTitle": "练习说明",
  "exercise38IntroContent": "欢迎来到嵌套的 If-Else 语句！🎉\n\n你的任务：\n1. 声明一个名为 `number` 的变量并赋值为一个整数。\n2. 使用 `if-else` 结构将数字分类为正数、负数或零。\n\n示例：\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"正数\");\nº else if (number < 0) #\n  print(\"负数\");\nº else #\n  print(\"零\");\nº```",
  "exercise38CorrectTitle": "正确！🎉",
  "exercise38CorrectContent": "太棒了！你已经正确实现了嵌套的 `if-else` 结构来处理多个条件。\n\n说明：\n- 如果数字大于 0，它是一个正数。\n- 如果数字小于 0，它是一个负数。\n- 否则，数字为零。\n\n这是根据数字的值对其进行分类的简单方法。",
  "exercise38Hint1Title": "提示 1",
  "exercise38Hint1Content": "先声明一个变量 `number` 并赋值。\n使用 `if (number > 0)` 检查数字是否为正数。",
  "exercise38Hint2Title": "提示 2",
  "exercise38Hint2Content": "添加一个条件 `else if (number < 0)` 来检查数字是否为负数。",
  "exercise38SolutionTitle": "解决方案",
  "exercise38SolutionContent": "正确的解决方案是：\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"正数\");\nº else if (number < 0) #\n  print(\"负数\");\nº else #\n  print(\"零\");\nº```",
  "exercise38Example": "示例：\n```swift\nvar number = 5;\nif (number > 0) #\n  print(\"正数\");\nº else if (number < 0) #\n  print(\"负数\");\nº else #\n  print(\"零\");\nº```",
  "exercise38Hint": "在此输入你的代码",
  "exercise39IntroTitle": "练习说明",
  "exercise39IntroContent": "欢迎来到 If-Else 嵌套挑战！🎉\n\n你的任务是确定员工可以获得的奖金类型：\n\n1. 声明变量 `yearsOfService`（整数）和 `performanceRating`（整数）。\n2. 使用嵌套的 `if-else` 结构：\n   - `高奖金`：`yearsOfService >= 10` 且 `performanceRating >= 8`。\n   - `中等奖金`：`yearsOfService >= 10` 且 `performanceRating < 8`。\n   - `最低奖金`：`yearsOfService < 10`。\n3. 打印相应的奖金类型。",
  "exercise39CorrectTitle": "正确！🎉",
  "exercise39CorrectContent": "干得好！你已经正确实现了嵌套的 `if-else` 逻辑来确定员工的奖金。\n\n**说明：**\n- 员工的 `yearsOfService >= 10` 且 `performanceRating >= 8` 时，可获得 `高奖金`。\n- 员工的 `yearsOfService >= 10` 且 `performanceRating < 8` 时，可获得 `中等奖金`。\n- 员工的 `yearsOfService < 10` 时，可获得 `最低奖金`。\n\n通过此练习，你可以了解嵌套条件和 Swift 中的决策逻辑。",
  "exercise39Hint1Title": "提示 1",
  "exercise39Hint1Content": "声明变量：将 `yearsOfService` 和 `performanceRating` 设置为整数。",
  "exercise39Hint2Title": "提示 2",
  "exercise39Hint2Content": "使用嵌套的 `if-else` 结构。首先评估 `yearsOfService`，然后检查 `performanceRating`。",
  "exercise39SolutionTitle": "解决方案",
  "exercise39SolutionContent": "正确的解决方案是：\n```swift\nvar yearsOfService = 12;\nvar performanceRating = 9;\nif yearsOfService >= 10 #\n    if performanceRating >= 8 #\n        print(\"高奖金\");\n    º else #\n        print(\"中等奖金\");\n    º\nº else #\n    print(\"最低奖金\");\nº",
  "exercise39Example": "示例：\n```swift\nvar yearsOfService = 12;\nvar performanceRating = 9;\nif yearsOfService >= 10 #\n    if performanceRating >= 8 #\n        print(\"高奖金\");\n    º else #\n        print(\"中等奖金\");\n    º\nº else #\n    print(\"最低奖金\");\nº",
  "exercise39Hint": "在此输入你的代码",
  "exercise40IntroTitle": "练习说明",
  "exercise40IntroContent": "你的任务是实现一个评分系统：\n\n1. 声明变量 `score`（整数）和 `participation`（布尔值）。\n2. 使用 `if-else` 条件：\n   - 如果 `score >= 90` 且 `participation == true`，打印 `A`。\n   - 如果 `score >= 80`，打印 `B`。\n   - 如果 `score >= 70`，打印 `C`。\n   - 如果 `score >= 60`，打印 `D`。\n   - 否则，打印 `F`。\n3. 打印最终评分。",
  "exercise40CorrectTitle": "正确！🎉",
  "exercise40CorrectContent": "干得好！你已经实现了一个包含多个条件的评分系统。\n\n**说明：**\n- 如果 `score >= 90` 且 `participation == true`，评分为 `A`。\n- 其他评分按递减顺序逐步评估。\n\n此方法有助于根据多个条件进行决策。",
  "exercise40Hint1Title": "提示 1",
  "exercise40Hint1Content": "开始声明变量：`score`（整数）和 `participation`（布尔值）。",
  "exercise40Hint2Title": "提示 2",
  "exercise40Hint2Content": "使用 `if` 语句判断最高条件：\nif score >= 90 && participation == true # ... º\n并使用 `else if` 来处理其他范围。",
  "exercise40SolutionTitle": "解决方案",
  "exercise40SolutionContent": "正确的解决方案是：\n```swift\nvar score = 85;\nvar participation = true;\nif score >= 90 && participation == true #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise40Example": "示例：\n```swift\nvar score = 85;\nvar participation = true;\nif score >= 90 && participation == true #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise40Hint": "在此输入你的代码",
  "exercise41IntroTitle": "练习说明",
  "exercise41IntroContent": "你的任务是评估大学录取：\n\n1. `gpa` 必须 >= 3.5。\n2. `hasRecommendation` 必须为 `true`。\n3. `isExtraCurricularActive` 必须为 `true`。\n\n如果符合所有条件，打印 `Admitted`。否则，打印 `Not Admitted`。",
  "exercise41CorrectTitle": "正确！🎉",
  "exercise41CorrectContent": "干得好！你已经成功实现了一个录取评估系统。",
  "exercise41Hint1Title": "提示 1",
  "exercise41Hint1Content": "声明以下变量：\n- `gpa`（例如：`3.8`）\n- `hasRecommendation`（例如：`true`）\n- `isExtraCurricularActive`（例如：`true`）。",
  "exercise41Hint2Title": "提示 2",
  "exercise41Hint2Content": "使用 `if` 来评估条件：\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true # ... º",
  "exercise41SolutionTitle": "解决方案",
  "exercise41SolutionContent": "```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise41Example": "示例：\n```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise41Hint": "在此输入你的代码",
  "exercise42IntroTitle": "练习说明",
  "exercise42IntroContent": "创建一个程序来评估大学录取，基于以下条件：\n\n1. `gpa`（例如：`3.8`）必须 >= 3.5。\n2. `hasRecommendation` 必须为 `true`。\n3. `isExtraCurricularActive` 必须为 `true`。\n\n如果满足所有条件，打印 `Admitted`。否则，打印 `Not Admitted`。",
  "exercise42CorrectTitle": "正确！🎉",
  "exercise42CorrectContent": "干得好！你已经创建了一个录取评估系统。\n\n**说明：**\n- `gpa >= 3.5` 确保学术资格。\n- `hasRecommendation` 验证推荐信。\n- `isExtraCurricularActive` 确保课外活动参与。\n\n只有符合所有条件的学生才能被录取。",
  "exercise42Hint1Title": "提示 1",
  "exercise42Hint1Content": "开始声明以下变量：\n- `var gpa = 3.8`\n- `var hasRecommendation = true`\n- `var isExtraCurricularActive = true`",
  "exercise42Hint2Title": "提示 2",
  "exercise42Hint2Content": "使用 `if` 来评估条件。例如：\n```swift\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise42SolutionTitle": "解决方案",
  "exercise42SolutionContent": "```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise42Example": "示例：\n```swift\nvar gpa = 3.8;\nvar hasRecommendation = true;\nvar isExtraCurricularActive = true;\nif gpa >= 3.5 && hasRecommendation == true && isExtraCurricularActive == true #\n    print(\"Admitted\");\nº else #\n    print(\"Not Admitted\");\nº\n```",
  "exercise42Hint": "在此输入你的代码",
  "exercise43IntroTitle": "练习说明",
  "exercise43IntroContent": "创建一个程序，根据学生的 `score` 评估成绩：\n\n1. 如果 `score` >= 90，打印 `A`。\n2. 如果 `score` >= 80，打印 `B`。\n3. 如果 `score` >= 70，打印 `C`。\n4. 如果 `score` >= 60，打印 `D`。\n5. 如果 `score` 小于 60，打印 `F`。",
  "exercise43CorrectTitle": "正确！🎉",
  "exercise43CorrectContent": "干得好！你成功实现了一个评分评估系统。\n\n**说明：**\n- 每个 `if` 或 `else if` 检查 `score` 是否在指定范围内。\n- 根据得分打印相应的成绩。\n\n这种结构在多条件决策场景中非常高效。",
  "exercise43Hint1Title": "提示 1",
  "exercise43Hint1Content": "首先声明一个变量 `score`。示例：`var score = 85`。",
  "exercise43Hint2Title": "提示 2",
  "exercise43Hint2Content": "使用 `if-else if-else` 语句比较 `score` 的值并打印成绩。",
  "exercise43SolutionTitle": "解决方案",
  "exercise43SolutionContent": "正确的解决方案是：\n```swift\nvar score = 85;\nif score >= 90 #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise43Example": "示例：\n```swift\nvar score = 85;\nif score >= 90 #\n    print(\"A\");\nº else if score >= 80 #\n    print(\"B\");\nº else if score >= 70 #\n    print(\"C\");\nº else if score >= 60 #\n    print(\"D\");\nº else #\n    print(\"F\");\nº\n```",
  "exercise43Hint": "在此输入代码",
  "exercise44IntroTitle": "练习说明",
  "exercise44IntroContent": "创建一个程序，根据以下条件检查密码强度：\n\n1. **强密码**：至少 8 个字符，包含字母和数字。\n2. **弱密码**：至少 6 个字符，但未达到 \"强密码\" 标准。\n3. **非常弱密码**：少于 6 个字符。",
  "exercise44CorrectTitle": "正确！🎉",
  "exercise44CorrectContent": "干得好！你已经实现了一个密码强度检查器。\n\n**说明：**\n- **强密码**：至少 8 个字符，包含字母和数字。\n- **弱密码**：至少 6 个字符，但缺少强密码的必要条件。\n- **非常弱密码**：少于 6 个字符。",
  "exercise44Hint1Title": "提示 1",
  "exercise44Hint1Content": "声明一个变量 `password`。示例：`var password = \"abc123\"`。",
  "exercise44Hint2Title": "提示 2",
  "exercise44Hint2Content": "使用 `.count` 检查长度，使用 `.contains` 验证内容。",
  "exercise44SolutionTitle": "解决方案",
  "exercise44SolutionContent": "正确的解决方案是：\n```swift\nvar password = \"abc123\";\nif password.count >= 8 && password.contains(\"\\d\") && password.contains(\"\\w\") #\n    print(\"强密码\");\nº else if password.count >= 6 #\n    print(\"弱密码\");\nº else #\n    print(\"非常弱密码\");\nº\n```",
  "exercise44Example": "示例：\n```swift\nvar password = \"abc123\";\nif password.count >= 8 && password.contains(\"\\d\") && password.contains(\"\\w\") #\n    print(\"强密码\");\nº else if password.count >= 6 #\n    print(\"弱密码\");\nº else #\n    print(\"非常弱密码\");\nº\n```",
  "exercise44Hint": "在此输入密码",
  "exercise45IntroTitle": "练习说明",
  "exercise45IntroContent": "创建一个程序，根据分数分配成绩：\n\n1. 如果 `score >= 90`，成绩为 `A`。\n2. 如果 `score >= 80`，成绩为 `B`。\n3. 如果 `score >= 70`，成绩为 `C`。\n4. 如果 `score >= 60`，成绩为 `D`。\n5. 如果 `score < 60`，成绩为 `F`。",
  "exercise45CorrectTitle": "正确！🎉",
  "exercise45CorrectContent": "干得好！你已经正确地用 `if-else` 实现了评分系统。",
  "exercise45Hint1Title": "提示 1",
  "exercise45Hint1Content": "声明一个变量 `score`。示例：`var score = 85`。",
  "exercise45Hint2Title": "提示 2",
  "exercise45Hint2Content": "使用 `if` 检查 `score >= 90`，并为其他范围添加 `else-if`。",
  "exercise45Hint3Title": "提示 3",
  "exercise45Hint3Content": "为所有评分范围完成结构。",
  "exercise45SolutionTitle": "解决方案",
  "exercise45SolutionContent": "正确的解决方案是：\n\n```swift\nvar score = 85;\nif (score >= 90) #\n    print(\"成绩为 A\");\nº else if (score >= 80) #\n    print(\"成绩为 B\");\nº else if (score >= 70) #\n    print(\"成绩为 C\");\nº else if (score >= 60) #\n    print(\"成绩为 D\");\nº else #\n    print(\"成绩为 F\");\nº\n```",
  "exercise45Example": "示例：\n\n```swift\nvar score = 85;\nif (score >= 90) #\n    print(\"成绩为 A\");\nº else # ... º\n```",
  "exercise45Hint": "在此输入代码",
  "purchaseSuccess": "购买成功！",
  "purchaseError": "购买过程中出现错误，请重试。",
  "purchasePending": "购买待处理，请稍候...",
  "purchaseException": "发生意外问题，请稍后再试。",
  "aboutLearnSwiftTitle": "关于 CodeCrafters",
  "aboutLearnSwiftContent": "CodeCrafters:Swift 是一款旨在帮助用户学习 Swift 的应用，Swift 是用于在 Apple 平台上创建应用的强大编程语言。此应用包含交互式练习，可帮助您在 Swift 编程中打下坚实基础。\n\n版本：Swift 5.9\n\n如果您有任何疑问或意见，请通过以下任一平台与我们联系：",
  "aboutCodeCraftersContent": "CodeCrafters 是一个教育平台，教授您最流行的语言和框架，例如 Swift、Python、Flutter 和 React。通过实用且互动的练习，您将学习如何创建从现代系统到 COBOL 等经典技术的 Web 应用、移动应用和智能应用。CodeCrafters 专为您设计，帮助您在当今技术世界中脱颖而出。\n\n如果您有任何疑问或意见，请通过以下任一平台与我们联系：",
  "comingSoonButton": "即将推出",
  "comingSoonTitle": "即将推出的课程", 
  "pythonCorrectTitle": "正确！🎉",
  "pythonCorrectExplanation": "很好！你成功使用了Python的`print()`函数。\n\n**解释：**\n- `print()`函数会将括号中的内容输出到控制台。\n- 你可以传递文本、变量或表达式给`print()`。",
  "pythonHintTitle1": "提示 1",
  "pythonHintContent1": "使用`print()`函数显示消息。例如：\n```python\nprint(\"你好，Python！\")\n```",
  "pythonHintTitle2": "提示 2",
  "pythonHintContent2": "确保你的`print()`语句格式正确。例如：\n```python\nprint(\"这是一个测试消息\")\n```",
  "pythonSolutionTitle": "解决方案",
  "pythonSolutionContent": "正确的解决方案是：\n\n```python\nprint(\"你好，Python！\")\n```",
  "pythonInstructionsTitle": "练习说明",
  "pythonInstructionsContent": "欢迎来到Python基础：打印任何内容！🎉\n\n你的任务：\n1. 使用`print()`函数在控制台显示消息。\n2. 你可以打印任何内容，比如文本、变量或表达式。",
  "pythonExampleTitle": "示例：",
  "pythonExampleOutput": "你好，Python！\n",
  "pythonEnterCodeHint": "在这里输入你的Python代码", 
  "pythonHintTitle3": "提示 1",
  "pythonHintContent3": "声明一个名为`name`的变量，并为其赋值。例如：\n```python\nname = \"Alice\"\n```",
  "pythonHintTitle4": "提示 2",
  "pythonHintContent4": "使用`+`来连接字符串。示例：\n```python\nprint(\"你好, \" + name)\n```",
  "pythonSolutionContent2": "正确的解决方案是：\n\n```python\nname = \"Alice\"\nprint(\"你好, \" + name)\n```",
  "pythonInstructionsTitle2": "练习说明",
  "pythonInstructionsContent2": "欢迎来到Python基础：个性化问候！🎉\n\n你的任务：\n1. 声明一个名为`name`的变量，并将你的名字赋值给它。\n2. 使用`+`将问候消息与变量连接起来。\n3. 使用`print()`函数打印完整消息。",
  "pythonExampleTitle2": "示例：",
  "pythonExampleOutput2": "你好, Alice!\n", 
  "pythonHintTitle5": "提示 1",
  "pythonHintContent5": "声明两个变量并为它们赋值。例如：\n```python\na = 10\nb = 20\n```",
  "pythonHintTitle6": "提示 2",
  "pythonHintContent6": "对变量执行数学运算。例如：\n```python\nprint(a + b)\n```",
  "pythonSolutionContent3": "正确的解决方案是：\n\n```python\na = 10\nb = 20\nprint(a + b)\n```",
  "pythonInstructionsTitle3": "练习说明",
  "pythonInstructionsContent3": "欢迎学习 Python 基础：数学运算！ 🎉\n\n你的任务：\n1. 声明两个变量并为它们赋整数值。\n2. 使用 `+`、`-`、`*` 或 `/` 运算符在它们之间进行操作。\n3. 使用 `print()` 函数打印结果。",
  "pythonExampleTitle3": "示例：",
  "pythonExampleOutput3": "30\n",
  "pythonEnterCodeHint3": "编写代码以执行操作", 
  "pythonCorrectTitle2": "正确！🎉",
  "pythonCorrectExplanation2": "做得好！你成功完成了数学运算。\n\n**解释：**\n- 使用 `=` 声明变量并赋值。\n- 使用 `+`、`-`、`*` 或 `/` 运算符进行计算。\n- 使用 `print()` 函数打印结果。", 
  "pythonCorrectTitle3": "正确！🎉",
  "pythonCorrectExplanation3": "太棒了！你成功操作了一个 Python 字符串。\n\n**解释：**\n- Python 中的字符串是对象，可以使用 `.upper()`、`.lower()` 和 `.capitalize()` 等方法来修改它们。\n- 使用 `+` 来连接字符串并创建新短语。",
  "pythonHintTitle7": "提示 1",
  "pythonHintContent7": "声明一个字符串变量并为其赋值。例如：\n```python\ntext = \"你好，Python\"\n```",
  "pythonHintTitle8": "提示 2",
  "pythonHintContent8": "使用 `.upper()` 或 `.lower()` 等方法操作字符串。例如：\n```python\nprint(text.upper())\n```",
  "pythonSolutionContent4": "正确的解决方案是：\n\n```python\ntext = \"你好，Python\"\nprint(text.upper())\n```",
  "pythonInstructionsTitle4": "练习说明",
  "pythonInstructionsContent4": "欢迎学习 Python 基础：字符串操作！ 🎉\n\n你的任务：\n1. 声明一个包含消息的字符串变量。\n2. 使用 `.upper()`、`.lower()` 或 `.capitalize()` 等方法修改字符串。\n3. 使用 `print()` 函数打印结果。",
  "pythonExampleTitle4": "示例：",
  "pythonExampleOutput4": "你好，PYTHON\n",
  "pythonEnterCodeHint4": "编写代码以操作字符串"
 
}